generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Access_Rule {
  access_rule_id  Int           @id @default(autoincrement())
  name            String?       @db.VarChar(255)
  access_code     String?       @db.VarChar(255)
  organization_id Int?
  trial_days      Int?
  enabled         Boolean?
  createdAt       DateTime      @db.DateTime(0)
  updatedAt       DateTime      @db.DateTime(0)
  deletedAt       DateTime?     @db.DateTime(0)
  Organization    Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, map: "Access_Rule_ibfk_1")

  @@index([organization_id], map: "organization_id")
}

model Account {
  account_id                                                    Int                      @id @default(autoincrement())
  name                                                          String?                  @db.VarChar(255)
  organization_id                                               Int?
  facebook_id                                                   String?                  @db.VarChar(255)
  page_access_token                                             String?                  @db.VarChar(255)
  main_admin_id                                                 Int?
  image                                                         String?                  @db.VarChar(255)
  facebook_subscribed                                           Boolean?                 @default(false)
  image_dashboard                                               String?                  @db.VarChar(255)
  main_color_dashboard                                          String?                  @db.VarChar(255)
  createdAt                                                     DateTime                 @db.DateTime(0)
  updatedAt                                                     DateTime                 @db.DateTime(0)
  deletedAt                                                     DateTime?                @db.DateTime(0)
  auto_reactivation_time                                        Int?                     @default(0)
  web_paycredential_id                                          Int?
  username                                                      String?                  @db.VarChar(150)
  merchant_id                                                   String?                  @db.VarChar(150)
  environment                                                   String?                  @db.VarChar(255)
  brn                                                           String?                  @db.VarChar(250)
  persona_id                                                    String?                  @db.VarChar(255)
  status                                                        String?                  @db.VarChar(255)
  is_bot_template                                               Boolean?
  bot_name                                                      String?                  @default("1") @db.VarChar(255)
  timezone                                                      String?                  @default("") @db.VarChar(255)
  can_exceed_plan                                               Boolean?                 @default(false)
  type                                                          String?                  @db.VarChar(255)
  case_queue_type                                               String?                  @default("on_demand") @db.VarChar(255)
  used_free_trial                                               Boolean?                 @default(false)
  bot_image                                                     String?                  @db.VarChar(255)
  representative_name                                           String?                  @db.VarChar(255)
  email                                                         String?                  @db.VarChar(255)
  business_turn                                                 String?                  @db.VarChar(255)
  phone                                                         String?                  @db.VarChar(255)
  kanguro_account_uuid                                          String?                  @db.VarChar(255)
  custom_domain                                                 String?                  @db.VarChar(255)
  business_manager_instagram_link                               String?                  @db.VarChar(255)
  cover_photo                                                   String?                  @db.VarChar(255)
  is_active                                                     Boolean?                 @default(true)
  Organization                                                  Organization?            @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, map: "Account_ibfk_1")
  Account_Attribute                                             Account_Attribute[]
  Account_Billing                                               Account_Billing[]
  Account_Configuration                                         Account_Configuration[]
  Account_Entity                                                Account_Entity[]
  Account_MITcredential                                         Account_MITcredential[]
  Account_Parameter                                             Account_Parameter[]
  Account_Status                                                Account_Status[]
  Active_Account                                                Active_Account[]
  Admin_Account                                                 Admin_Account[]
  Alexa                                                         Alexa[]
  Attribute_Value                                               Attribute_Value[]
  Auto_Report                                                   Auto_Report[]
  B2chat                                                        B2chat[]
  B2chat_User                                                   B2chat_User[]
  BMessaging                                                    BMessaging[]
  Billing                                                       Billing[]
  Bot_Version                                                   Bot_Version[]
  Breadcrumb                                                    Breadcrumb[]
  Case                                                          Case[]
  Category                                                      Category[]
  CentroDePago                                                  CentroDePago[]
  Chat_Activity                                                 Chat_Activity[]
  Conekta                                                       Conekta[]
  Custom_Report                                                 Custom_Report[]
  Custom_View                                                   Custom_View[]
  Custom_View_Account                                           Custom_View_Account[]
  Ecommerce                                                     Ecommerce[]
  Epayco                                                        Epayco[]
  Event_Value                                                   Event_Value[]
  Extension_Account                                             Extension_Account[]
  Facebook                                                      Facebook[]
  Filter                                                        Filter[]
  Flow                                                          Flow[]
  Flow_Group_Account                                            Flow_Group_Account[]
  Generic_Order                                                 Generic_Order[]
  Generic_Response                                              Generic_Response[]
  Generic_User_Flow                                             Generic_User_Flow[]
  Genesys                                                       Genesys[]
  Guest_User                                                    Guest_User[]
  H4Mail                                                        H4Mail[]
  H4Mail_User                                                   H4Mail_User[]
  Instagram                                                     Instagram[]
  Instagram_DM                                                  Instagram_DM[]
  Instagram_User                                                Instagram_User[]
  Intent_Event                                                  Intent_Event[]
  Keyword                                                       Keyword[]
  Knowledge                                                     Knowledge[]
  Label                                                         Label[]
  Lambda                                                        Lambda[]
  Language_Account                                              Language_Account[]
  Messenger                                                     Messenger[]
  Metric                                                        Metric[]
  Niubiz                                                        Niubiz[]
  Order                                                         Order[]
  Parameter_Value                                               Parameter_Value[]
  Paypal                                                        Paypal[]
  Payu                                                          Payu[]
  Pickup_Location                                               Pickup_Location[]
  Platform_Account                                              Platform_Account[]
  Plugin_Attribute_Value                                        Plugin_Attribute_Value[]
  Post                                                          Post[]
  Praga                                                         Praga[]
  Process                                                       Process[]
  Product                                                       Product[]
  Public_Media                                                  Public_Media[]
  Pure_Social                                                   Pure_Social[]
  Queue_Account                                                 Queue_Account?
  Rate                                                          Rate[]
  Reference                                                     Reference[]
  Reminder                                                      Reminder[]
  Report                                                        Report[]
  Request_Plan_Payment                                          Request_Plan_Payment[]
  Response                                                      Response[]
  Response_Template                                             Response_Template[]
  Rule                                                          Rule[]
  Sandbox                                                       Sandbox[]
  Sandbox_User                                                  Sandbox_User[]
  Sequence                                                      Sequence[]
  Shape                                                         Shape[]
  Shopify                                                       Shopify[]
  Sticker                                                       Sticker[]
  Stripe                                                        Stripe[]
  Telegram                                                      Telegram[]
  Telegram_User                                                 Telegram_User[]
  Test                                                          Test[]
  Test_User                                                     Test_User[]
  Topic                                                         Topic[]
  Twitter                                                       Twitter[]
  TwitterDM                                                     TwitterDM[]
  TwitterDM_User                                                TwitterDM_User[]
  Twitter_User                                                  Twitter_User[]
  Usage                                                         Usage[]
  User                                                          User[]
  User_Attribute                                                User_Attribute[]
  User_Flow                                                     User_Flow[]
  Voice_Twilio                                                  Voice_Twilio[]
  Voicebot                                                      Voicebot[]
  Webhook                                                       Webhook[]
  Whatsapp                                                      Whatsapp[]
  Whatsapp_Gupshup                                              Whatsapp_Gupshup[]
  Whatsapp_Infobip                                              Whatsapp_Infobip[]
  Whatsapp_Infobip_User                                         Whatsapp_Infobip_User[]
  Whatsapp_Likenuuk                                             Whatsapp_Likenuuk[]
  Whatsapp_Official_Whatsapp_Official_account_idToAccount       Whatsapp_Official[]      @relation("Whatsapp_Official_account_idToAccount")
  Whatsapp_Official_Whatsapp_Official_AccountAccountIdToAccount Whatsapp_Official[]      @relation("Whatsapp_Official_AccountAccountIdToAccount")
  Whatsapp_Official_User                                        Whatsapp_Official_User[]
  Whatsapp_Smooch                                               Whatsapp_Smooch[]
  Whatsapp_Twilio                                               Whatsapp_Twilio[]
  Whatsapp_Twilio_User                                          Whatsapp_Twilio_User[]
  Whatsapp_User                                                 Whatsapp_User[]
  Whatsapp_Wapi                                                 Whatsapp_Wapi[]
  Whatsapp_Wavy                                                 Whatsapp_Wavy[]

  @@index([organization_id], map: "organization_id")
}

model Account_Attribute {
  account_attribute_id    Int                       @id @default(autoincrement())
  account_id              Int?
  name                    String?                   @db.VarChar(255)
  type                    String?                   @db.VarChar(255)
  description             String?                   @db.VarChar(255)
  createdAt               DateTime                  @db.DateTime(0)
  updatedAt               DateTime                  @db.DateTime(0)
  deletedAt               DateTime?                 @db.DateTime(0)
  value                   String?                   @db.Text
  frontend_type           String?                   @db.VarChar(150)
  title                   String?                   @db.VarChar(150)
  brn                     String?                   @db.VarChar(255)
  priority                Int?                      @default(0)
  message_type            String?                   @db.VarChar(255)
  Account                 Account?                  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Account_Attribute_ibfk_1")
  Account_Attribute_Value Account_Attribute_Value[]

  @@index([account_id], map: "account_id")
}

model Account_Attribute_Value {
  account_attribute_value_id Int                @id @default(autoincrement())
  account_attribute_id       Int?
  value                      String?            @db.Text
  account_id                 Int?
  createdAt                  DateTime           @db.DateTime(0)
  updatedAt                  DateTime           @db.DateTime(0)
  deletedAt                  DateTime?          @db.DateTime(0)
  Account_Attribute          Account_Attribute? @relation(fields: [account_attribute_id], references: [account_attribute_id], onDelete: Cascade, map: "Account_Attribute_Value_ibfk_1")

  @@index([account_attribute_id], map: "account_attribute_id")
}

model Account_Billing {
  account_billing_id Int       @id @default(autoincrement())
  account_id         Int?
  type               String?   @db.VarChar(255)
  expire_date        DateTime? @db.DateTime(0)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  Account            Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Account_Billing_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Account_Configuration {
  account_configuration_id          Int       @id @default(autoincrement())
  account_id                        Int?
  auto_reactivation_time            Int?      @default(0)
  case_queue_type                   String?   @default("on_demand") @db.VarChar(255)
  close_case_time                   Int?
  createdAt                         DateTime  @db.DateTime(0)
  updatedAt                         DateTime  @db.DateTime(0)
  deletedAt                         DateTime? @db.DateTime(0)
  close_case_next_block_id          Int?
  graph_nlp_enabled                 Boolean?  @default(false)
  emergency_admin                   String?   @db.VarChar(255)
  case_emergency_action             String?   @db.VarChar(255)
  emergency_group                   String?   @db.VarChar(255)
  case_time_out                     Float?    @default(18) @db.Float
  case_assignment_times             Int?
  always_send_case_email            Boolean?
  case_email_custom_content         String?   @db.Text
  emergency_sms                     String?   @db.VarChar(255)
  add_unique_payment_reference      Boolean?  @default(true)
  payment_link_life_time            Int?      @default(1)
  messenger_fields                  String?   @db.VarChar(255)
  image_aspect_ratio                String?   @default("horizontal") @db.VarChar(255)
  cdp_enable_payment_email          Boolean?  @default(false)
  max_cases_to_assign               Int?      @default(5)
  emergency_text                    String?   @db.Text
  emergency_next_block_id           Int?
  save_activity_logs                Boolean?  @default(false)
  force_case_tag                    Boolean?  @default(false)
  template_auth_code_alphanumeric   Boolean?  @default(false)
  template_auth_code_length         Int?      @default(0)
  country_code                      String?   @db.Text
  currency_code                     String?   @db.Text
  language_code                     String?   @db.Text
  is_whatsapp_screen_name_enabled   Boolean?  @default(false)
  is_bmessaging_screen_name_enabled Boolean?  @default(false)
  currency                          String?   @default("MXN") @db.VarChar(255)
  case_queue_sort                   String?   @default("number_of_cases") @db.VarChar(255)
  smart_automation                  Boolean?  @default(false)
  automation_block_id               Int?
  Account                           Account?  @relation(fields: [account_id], references: [account_id], map: "Account_Configuration_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Account_Entity {
  account_entity_id Int       @id @default(autoincrement())
  entity_id         Int?
  account_id        Int?
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  Entity            Entity?   @relation(fields: [entity_id], references: [entity_id], onDelete: Cascade, map: "Account_Entity_ibfk_1")
  Account           Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Account_Entity_ibfk_2")

  @@unique([entity_id, account_id], map: "Account_Entity_entity_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Account_MITcredential {
  account_mit_credential_id Int             @id @default(autoincrement())
  mit_credential_id         Int?
  account_id                Int?
  createdAt                 DateTime        @db.DateTime(0)
  updatedAt                 DateTime        @db.DateTime(0)
  deletedAt                 DateTime?       @db.DateTime(0)
  MIT_credential            MIT_credential? @relation(fields: [mit_credential_id], references: [mit_credential_id], onDelete: Cascade, map: "Account_MITcredential_ibfk_1")
  Account                   Account?        @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Account_MITcredential_ibfk_2")

  @@unique([mit_credential_id, account_id], map: "Account_MITcredential_mit_credential_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Account_Parameter {
  account_parameter_id Int        @id @default(autoincrement())
  parameter_id         Int?
  account_id           Int?
  createdAt            DateTime   @db.DateTime(0)
  updatedAt            DateTime   @db.DateTime(0)
  deletedAt            DateTime?  @db.DateTime(0)
  Parameter            Parameter? @relation(fields: [parameter_id], references: [parameter_id], onDelete: Cascade, map: "Account_Parameter_ibfk_1")
  Account              Account?   @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Account_Parameter_ibfk_2")

  @@unique([parameter_id, account_id], map: "Account_Parameter_parameter_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Account_Status {
  account_status_id           Int       @id @default(autoincrement())
  account_id                  Int?
  bot_template                String?   @db.VarChar(255)
  source                      String?   @db.VarChar(255)
  account_type                String?   @db.VarChar(255)
  payment_enabled             Boolean?  @default(false)
  payment_validated           Boolean?  @default(false)
  bot_enabled                 Boolean?  @default(false)
  products_enabled            Int?      @default(0)
  createdAt                   DateTime  @db.DateTime(0)
  updatedAt                   DateTime  @db.DateTime(0)
  deletedAt                   DateTime? @db.DateTime(0)
  kanguro_status              String?   @db.VarChar(255)
  max_free_shippings          Int?
  max_free_shippings_amount   Float?    @db.Float
  free_shippings_end_date     DateTime? @db.DateTime(0)
  free_shippings_count        Int?
  total_amount_free_shippings Float?    @db.Float
  shippings_count             Int?
  total_amount_shippings      Float?    @db.Float
  Account                     Account?  @relation(fields: [account_id], references: [account_id], map: "Account_Status_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Active_Account {
  active_account_id Int       @id @default(autoincrement())
  account_id        Int?
  partner_id        Int?
  active_users      Int?
  max_users         Int?
  billed_days       Int?
  business_name     String?   @db.VarChar(255)
  account_name      String?   @db.VarChar(255)
  plan_name         String?   @db.VarChar(255)
  start_date        DateTime? @db.DateTime(0)
  expire_date       DateTime? @db.DateTime(0)
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  paid_for_plan     Float?    @db.Float
  Account           Account?  @relation(fields: [account_id], references: [account_id], map: "Active_Account_ibfk_1")
  Partner           Partner?  @relation(fields: [partner_id], references: [partner_id], onDelete: Cascade, map: "Active_Account_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([partner_id], map: "partner_id")
}

model Admin {
  admin_id                Int                  @id @default(autoincrement())
  first_name              String?              @db.VarChar(255)
  last_name               String?              @db.VarChar(255)
  email                   String               @db.VarChar(255)
  password                String               @db.VarChar(255)
  status                  String?              @db.VarChar(255)
  last_login              DateTime?            @db.DateTime(0)
  messenger_id            String?              @db.VarChar(255)
  facebook_id             String?              @db.VarChar(255)
  user_access_token       String?              @db.VarChar(255)
  long_live_access_token  String?              @db.VarChar(255)
  createdAt               DateTime             @db.DateTime(0)
  updatedAt               DateTime             @db.DateTime(0)
  deletedAt               DateTime?            @db.DateTime(0)
  organization_id_creator Int?
  role_id                 Int?
  image                   String?              @db.VarChar(255)
  partner_id              Int?
  display_name            String?              @db.VarChar(255)
  persona_id              String?              @db.VarChar(255)
  can_attend_cases        Boolean?             @default(true)
  player_id               String?              @db.VarChar(255)
  google_auth0            String?              @db.VarChar(255)
  facebook_auth0          String?              @db.VarChar(255)
  two_factor_token        String?              @db.VarChar(255)
  phone_number            String?              @db.VarChar(255)
  enable_two_factor_auth  Boolean?             @default(false)
  two_factor_auth_source  String?              @db.VarChar(255)
  Admin_Account           Admin_Account[]
  Admin_Activity          Admin_Activity[]
  Admin_Connection        Admin_Connection[]
  Admin_Group             Admin_Group[]
  Admin_Organization      Admin_Organization[]
  Admin_Permission        Admin_Permission[]
  Admin_Session           Admin_Session[]
  Card                    Card[]
  Case                    Case[]
  Case_History            Case_History[]
  Clipboard               Clipboard[]
  Notification            Notification[]
  Request_Log             Request_Log[]
}

model Admin_Account {
  admin_account_id        Int       @id @default(autoincrement())
  admin_id                Int?
  account_id              Int?
  rol                     String?   @db.VarChar(255)
  createdAt               DateTime  @db.DateTime(0)
  updatedAt               DateTime  @db.DateTime(0)
  deletedAt               DateTime? @db.DateTime(0)
  fb_persona_id           String?   @db.VarChar(255)
  status                  String?   @db.VarChar(255)
  last_case_assigned_time DateTime? @db.DateTime(0)
  Admin                   Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Admin_Account_ibfk_1")
  Account                 Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Admin_Account_ibfk_2")

  @@unique([admin_id, account_id], map: "Admin_Account_admin_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Admin_Activity {
  admin_activity_id      Int       @id @default(autoincrement())
  admin_id               Int?
  action                 String?   @db.VarChar(255)
  data                   String?   @db.Text
  is_automatic_action    Boolean?  @default(false)
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  admin_id_action_author Int?
  Admin                  Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Admin_Activity_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Admin_Answer {
  admin_answer  Int       @id @default(autoincrement())
  admin_id      Int?
  account_id    Int?
  answerTime    Int?
  casesAnswered Int?
  day           DateTime? @db.DateTime(0)
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
}

model Admin_Connection {
  admin_connection_id Int       @id @default(autoincrement())
  admin_id            Int?
  client_id           String    @db.VarChar(255)
  ip_address          String?   @db.VarChar(255)
  first_connection    DateTime? @db.DateTime(0)
  last_connection     DateTime? @db.DateTime(0)
  last_disconnection  DateTime? @db.DateTime(0)
  active              Boolean?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Admin               Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, map: "Admin_Connection_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Admin_Group {
  admin_group_id Int       @id @default(autoincrement())
  admin_id       Int?
  group_id       Int?
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime  @db.DateTime(0)
  deletedAt      DateTime? @db.DateTime(0)
  Admin          Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Admin_Group_ibfk_1")
  Group          Group?    @relation(fields: [group_id], references: [group_id], onDelete: NoAction, map: "Admin_Group_ibfk_2")

  @@unique([admin_id, group_id], map: "Admin_Group_group_id_admin_id_unique")
  @@index([group_id], map: "group_id")
}

model Admin_Organization {
  admin_organization_id Int           @id @default(autoincrement())
  admin_id              Int?
  organization_id       Int?
  rol                   String?       @db.VarChar(255)
  createdAt             DateTime      @db.DateTime(0)
  updatedAt             DateTime      @db.DateTime(0)
  deletedAt             DateTime?     @db.DateTime(0)
  Admin                 Admin?        @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Admin_Organization_ibfk_1")
  Organization          Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, map: "Admin_Organization_ibfk_2")

  @@unique([admin_id, organization_id], map: "Admin_Organization_organization_id_admin_id_unique")
  @@index([organization_id], map: "organization_id")
}

model Admin_Permission {
  admin_permission_id Int         @id @default(autoincrement())
  admin_id            Int?
  permission_id       Int?
  createdAt           DateTime    @db.DateTime(0)
  updatedAt           DateTime    @db.DateTime(0)
  deletedAt           DateTime?   @db.DateTime(0)
  Admin               Admin?      @relation(fields: [admin_id], references: [admin_id], onDelete: Restrict, onUpdate: Restrict, map: "Admin_Permission_ibfk_1")
  Permission          Permission? @relation(fields: [permission_id], references: [permission_id], onDelete: Restrict, onUpdate: Restrict, map: "Admin_Permission_ibfk_2")

  @@index([admin_id], map: "admin_id")
  @@index([permission_id], map: "permission_id")
}

model Admin_Session {
  admin_session_id Int       @id @default(autoincrement())
  admin_id         Int?
  status           String?   @db.VarChar(255)
  start_time       DateTime? @db.DateTime(0)
  end_time         DateTime? @db.DateTime(0)
  duration         Int?
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  Admin            Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Admin_Session_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Alexa {
  alexa_id    Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  account_id  Int?
  subscribed  Boolean?
  skill_id    String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  get_started Int?
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Alexa_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Answer {
  answer_id          Int                  @id @default(autoincrement())
  post_id            Int?
  platform           String?              @db.VarChar(255)
  sentiment          String?              @db.VarChar(255)
  text               String?              @db.MediumText
  image              String?              @db.MediumText
  enabled            Boolean?             @default(true)
  createdAt          DateTime             @db.DateTime(0)
  updatedAt          DateTime             @db.DateTime(0)
  deletedAt          DateTime?            @db.DateTime(0)
  public_media_id    Int?
  Post               Post?                @relation(fields: [post_id], references: [post_id], onDelete: NoAction, map: "Answer_ibfk_1")
  Answer_Interaction Answer_Interaction[]

  @@index([post_id], map: "post_id")
}

model Answer_Interaction {
  answer_interaction_id   Int       @id @default(autoincrement())
  external_interaction_id String?   @db.VarChar(255)
  answer_id               Int?
  platform                String?   @db.VarChar(255)
  text                    String?   @db.Text
  image                   String?   @db.Text
  sentiment               Float?    @db.Float
  sentiment_label         String?   @db.VarChar(255)
  sender_id               String?   @db.VarChar(255)
  sender_name             String?   @db.VarChar(255)
  reaction_type           String?   @db.Text
  createdAt               DateTime  @db.DateTime(0)
  updatedAt               DateTime  @db.DateTime(0)
  deletedAt               DateTime? @db.DateTime(0)
  Answer                  Answer?   @relation(fields: [answer_id], references: [answer_id], onDelete: NoAction, map: "Answer_Interaction_ibfk_1")

  @@index([answer_id], map: "answer_id")
}

model Attribute {
  attribute_id    Int               @id @default(autoincrement())
  name            String?           @db.VarChar(255)
  type            String?           @db.VarChar(255)
  entity_id       Int?
  createdAt       DateTime          @db.DateTime(0)
  updatedAt       DateTime          @db.DateTime(0)
  deletedAt       DateTime?         @db.DateTime(0)
  brn             String?           @db.VarChar(255)
  Entity          Entity?           @relation(fields: [entity_id], references: [entity_id], onDelete: NoAction, map: "Attribute_ibfk_1")
  Attribute_Value Attribute_Value[]
  Event_Value     Event_Value[]

  @@index([entity_id], map: "entity_id")
}

model Attribute_Value {
  attribute_value_id Int        @id @default(autoincrement())
  row_id             Int?
  attribute_id       Int?
  account_id         Int?
  value              String?    @db.MediumText
  createdAt          DateTime   @db.DateTime(0)
  updatedAt          DateTime   @db.DateTime(0)
  deletedAt          DateTime?  @db.DateTime(0)
  Attribute          Attribute? @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade, map: "Attribute_Value_ibfk_1")
  Account            Account?   @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Attribute_Value_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([attribute_id], map: "attribute_id")
}

model Auto_Report {
  auto_report_id       Int       @id @default(autoincrement())
  account_id           Int?
  created_by_admin     Int?
  url                  String?   @db.Text
  name                 String?   @db.VarChar(255)
  frequency            String?   @db.VarChar(255)
  platforms            String?   @db.VarChar(255)
  include_active_users Boolean?
  include_cases        Boolean?
  include_performance  Boolean?
  include_metrics      Boolean?
  latest_update        DateTime? @db.DateTime(0)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  Account              Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Auto_Report_ibfk_1")

  @@index([account_id], map: "account_id")
}

model B2chat {
  b2chat_id  Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  account_id Int?
  subscribed Boolean?
  admin_id   String?   @db.VarChar(255)
  token      String?   @db.VarChar(255)
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  Account    Account?  @relation(fields: [account_id], references: [account_id], map: "B2chat_ibfk_1")

  @@index([account_id], map: "account_id")
}

model B2chat_User {
  user_id               Int       @id @default(autoincrement())
  first_name            String?   @db.VarChar(255)
  last_name             String?   @db.VarChar(255)
  profile_pic           String?   @db.VarChar(255)
  phone_number          String?   @db.VarChar(255)
  account_id            Int?
  gender                String?   @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime? @db.DateTime(0)
  sequence_step         Int?      @default(0)
  is_subscribed         Boolean?
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  Account               Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "B2chat_User_ibfk_1")
  Sequence              Sequence? @relation(fields: [sequence_id], references: [sequence_id], map: "B2chat_User_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model BMessaging {
  bmessaging_id      Int                 @id @default(autoincrement())
  name               String?             @db.VarChar(255)
  account_id         Int?
  bmid               String?             @db.VarChar(255)
  token              String?             @db.VarChar(255)
  subscribed         Boolean?
  createdAt          DateTime            @db.DateTime(0)
  updatedAt          DateTime            @db.DateTime(0)
  deletedAt          DateTime?           @db.DateTime(0)
  image              String?             @db.VarChar(255)
  icon               String?             @db.VarChar(255)
  color              String?             @db.VarChar(255)
  greetings          String?             @db.VarChar(255)
  welcome_msg        String?             @db.VarChar(255)
  show_brand         Boolean?            @default(true)
  description        String?             @db.VarChar(255)
  user_message_color String?             @db.VarChar(255)
  Account            Account?            @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "BMessaging_ibfk_1")
  BMessaging_Card    BMessaging_Card[]
  BMessaging_Domain  BMessaging_Domain[]
  BMessaging_Menu    BMessaging_Menu[]

  @@index([account_id], map: "account_id")
}

model BMessaging_Card {
  bmessaging_card_id Int         @id @default(autoincrement())
  title              String?     @db.VarChar(255)
  text               String?     @db.VarChar(255)
  type               String?     @db.VarChar(255)
  payload            String?     @db.VarChar(255)
  button_title       String?     @db.VarChar(255)
  image              String?     @db.VarChar(255)
  bmessaging_id      Int?
  createdAt          DateTime    @db.DateTime(0)
  updatedAt          DateTime    @db.DateTime(0)
  deletedAt          DateTime?   @db.DateTime(0)
  BMessaging         BMessaging? @relation(fields: [bmessaging_id], references: [bmessaging_id], onDelete: Cascade, map: "BMessaging_Card_ibfk_1")

  @@index([bmessaging_id], map: "bmessaging_id")
}

model BMessaging_Domain {
  bmessaging_domain_id Int         @id @default(autoincrement())
  name                 String?     @db.VarChar(255)
  domain               String?     @db.VarChar(255)
  enabled              Boolean?
  bmessaging_id        Int?
  createdAt            DateTime    @db.DateTime(0)
  updatedAt            DateTime    @db.DateTime(0)
  deletedAt            DateTime?   @db.DateTime(0)
  BMessaging           BMessaging? @relation(fields: [bmessaging_id], references: [bmessaging_id], onDelete: Cascade, map: "BMessaging_Domain_ibfk_1")

  @@index([bmessaging_id], map: "bmessaging_id")
}

model BMessaging_Menu {
  bmessaging_menu_id Int         @id @default(autoincrement())
  title              String?     @db.VarChar(255)
  type               String?     @db.VarChar(255)
  payload            String?     @db.VarChar(255)
  bmessaging_id      Int?
  createdAt          DateTime    @db.DateTime(0)
  updatedAt          DateTime    @db.DateTime(0)
  deletedAt          DateTime?   @db.DateTime(0)
  BMessaging         BMessaging? @relation(fields: [bmessaging_id], references: [bmessaging_id], onDelete: Cascade, map: "BMessaging_Menu_ibfk_1")

  @@index([bmessaging_id], map: "bmessaging_id")
}

model BPayment_Credential {
  bpayment_credential_id Int       @id @default(autoincrement())
  partner_id             Int?
  token                  String?   @db.Text
  username               String?   @db.VarChar(255)
  password               String?   @db.VarChar(255)
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  Partner                Partner?  @relation(fields: [partner_id], references: [partner_id], map: "BPayment_Credential_ibfk_1")

  @@index([partner_id], map: "partner_id")
}

model Billing {
  billing_id           Int           @id @default(autoincrement())
  account_id           Int?
  plan_id              Int?
  start_date           DateTime?     @db.DateTime(0)
  billed_months        Int?
  plan_payment_id      Int?
  status               String?       @db.VarChar(255)
  usage_id             Int?
  stripe_customer      String?       @db.VarChar(255)
  last_renew_date      DateTime?     @db.DateTime(0)
  createdAt            DateTime      @db.DateTime(0)
  updatedAt            DateTime      @db.DateTime(0)
  deletedAt            DateTime?     @db.DateTime(0)
  last_payment_success Boolean?
  auto_renew           Boolean?
  type                 Int?
  billed_days          Int?
  Account              Account?      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Billing_ibfk_1")
  Plan                 Plan?         @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, map: "Billing_ibfk_2")
  Plan_Payment         Plan_Payment? @relation(fields: [plan_payment_id], references: [plan_payment_id], onDelete: Cascade, map: "Billing_ibfk_3")
  Usage                Usage?        @relation(fields: [usage_id], references: [usage_id], onDelete: Cascade, map: "Billing_ibfk_4")

  @@index([account_id], map: "account_id")
  @@index([plan_id], map: "plan_id")
  @@index([plan_payment_id], map: "plan_payment_id")
  @@index([usage_id], map: "usage_id")
}

model Block {
  block_id          Int                 @id @default(autoincrement())
  flow_id           Int?
  name              String?             @db.VarChar(255)
  block_number      Int?
  is_final          Boolean?
  user_attribute_id Int?
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  sequence_id       Int?
  is_kpi            Boolean?            @default(false)
  kpi_name          String?             @db.VarChar(150)
  kpi_description   String?             @db.VarChar(150)
  type              String?             @default("normal") @db.VarChar(150)
  kpi_color         String?             @db.VarChar(50)
  copy_of           Int?
  brn               String?             @db.VarChar(255)
  is_favorite       Boolean?
  is_important      Boolean?
  Sequence          Sequence?           @relation(fields: [sequence_id], references: [sequence_id], onDelete: Restrict, onUpdate: Restrict, map: "Block_Sequence_sequence_id_fk")
  Flow              Flow?               @relation(fields: [flow_id], references: [flow_id], onDelete: NoAction, map: "Block_ibfk_1")
  User_Attribute    User_Attribute?     @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Block_ibfk_2")
  Generic_Response  Generic_Response[]
  Generic_User_Flow Generic_User_Flow[]
  Response          Response[]
  Template          Template[]
  User_Flow         User_Flow[]

  @@index([sequence_id], map: "Block_Sequence_sequence_id_fk")
  @@index([flow_id], map: "flow_id")
  @@index([user_attribute_id], map: "user_attribute_id")
}

model Bot_Version {
  bot_version_id Int       @id @default(autoincrement())
  account_id     Int?
  name           String?   @db.VarChar(255)
  description    String?   @db.VarChar(255)
  version_id     String?   @db.VarChar(255)
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime  @db.DateTime(0)
  deletedAt      DateTime? @db.DateTime(0)
  Account        Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Bot_Version_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Breadcrumb {
  breadcrumb_id Int       @id @default(autoincrement())
  account_id    Int?
  user_id       Int?
  block_id      Int?
  platform      String?   @db.VarChar(255)
  log           String?   @db.Text
  error_log     String?   @db.Text
  start_time    DateTime? @db.DateTime(0)
  end_time      DateTime? @db.DateTime(0)
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  admin_id      Int?
  Account       Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Breadcrumb_ibfk_1")

  @@index([account_id], map: "account_id")
  @@index([admin_id], map: "admin_id")
  @@index([user_id], map: "user_id")
}

model Card {
  card_id         Int            @id @default(autoincrement())
  last_digits     Int?
  name            String?        @db.VarChar(255)
  issuer          String?        @db.VarChar(255)
  token           String?        @db.VarChar(255)
  organization_id Int?
  admin_id        Int?
  createdAt       DateTime       @db.DateTime(0)
  updatedAt       DateTime       @db.DateTime(0)
  deletedAt       DateTime?      @db.DateTime(0)
  is_primary      Boolean?
  account_id      Int?
  Organization    Organization?  @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, map: "Card_ibfk_1")
  Admin           Admin?         @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Card_ibfk_2")
  Plan_Payment    Plan_Payment[]

  @@index([admin_id], map: "admin_id")
  @@index([organization_id], map: "organization_id")
}

model Case {
  case_id                                                                  Int                           @id @default(autoincrement())
  name                                                                     String?                       @db.VarChar(255)
  admin_assigned_id                                                        Int?
  status                                                                   String?                       @default("open") @db.VarChar(255)
  account_id                                                               Int?
  group_id                                                                 Int?
  createdAt                                                                DateTime                      @db.DateTime(0)
  updatedAt                                                                DateTime                      @db.DateTime(0)
  deletedAt                                                                DateTime?                     @db.DateTime(0)
  created_by_user_id                                                       Int?
  created_on_platform_id                                                   Int?
  last_message_author                                                      String?                       @db.VarChar(255)
  last_message_preview                                                     String?                       @db.VarChar(255)
  last_message_time                                                        DateTime?                     @db.DateTime(0)
  read                                                                     Boolean?
  sequence_step                                                            Int?                          @default(0)
  outBound                                                                 Boolean?
  template_name                                                            String?                       @db.VarChar(255)
  smart_automation                                                         Boolean?                      @default(false)
  User                                                                     User?                         @relation(fields: [created_by_user_id], references: [user_id], onDelete: Restrict, onUpdate: Restrict, map: "Case_User_user_id_fk")
  Admin                                                                    Admin?                        @relation(fields: [admin_assigned_id], references: [admin_id], onDelete: Cascade, map: "Case_ibfk_1")
  Account                                                                  Account?                      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Case_ibfk_2")
  Group                                                                    Group?                        @relation(fields: [group_id], references: [group_id], onDelete: Cascade, map: "Case_ibfk_3")
  Case_Activity                                                            Case_Activity[]
  Case_History                                                             Case_History[]
  Case_Note                                                                Case_Note[]
  Case_Session                                                             Case_Session[]
  Case_Tag                                                                 Case_Tag[]
  Facebook_User_Case                                                       Facebook_User_Case[]
  Guest_User_Case                                                          Guest_User_Case[]
  H4Mail_User_Case                                                         H4Mail_User_Case[]
  Instagram_User_Case_Instagram_User_Case_case_idToCase                    Instagram_User_Case[]         @relation("Instagram_User_Case_case_idToCase")
  Instagram_User_Case_Instagram_User_Case_CaseCaseIdToCase                 Instagram_User_Case[]         @relation("Instagram_User_Case_CaseCaseIdToCase")
  Messenger_User_Case                                                      Messenger_User_Case[]
  Sandbox_User_Case                                                        Sandbox_User_Case[]
  TwitterDM_User_Case                                                      TwitterDM_User_Case[]
  Twitter_User_Case                                                        Twitter_User_Case[]
  User_Case                                                                User_Case[]
  Whatsapp_Infobip_User_Case                                               Whatsapp_Infobip_User_Case[]
  Whatsapp_Official_User_Case_Whatsapp_Official_User_Case_case_idToCase    Whatsapp_Official_User_Case[] @relation("Whatsapp_Official_User_Case_case_idToCase")
  Whatsapp_Official_User_Case_Whatsapp_Official_User_Case_CaseCaseIdToCase Whatsapp_Official_User_Case[] @relation("Whatsapp_Official_User_Case_CaseCaseIdToCase")
  Whatsapp_Twilio_User_Case_Whatsapp_Twilio_User_Case_case_idToCase        Whatsapp_Twilio_User_Case[]   @relation("Whatsapp_Twilio_User_Case_case_idToCase")
  Whatsapp_Twilio_User_Case_Whatsapp_Twilio_User_Case_CaseCaseIdToCase     Whatsapp_Twilio_User_Case[]   @relation("Whatsapp_Twilio_User_Case_CaseCaseIdToCase")
  Whatsapp_User_Case_Whatsapp_User_Case_case_idToCase                      Whatsapp_User_Case[]          @relation("Whatsapp_User_Case_case_idToCase")
  Whatsapp_User_Case_Whatsapp_User_Case_CaseCaseIdToCase                   Whatsapp_User_Case[]          @relation("Whatsapp_User_Case_CaseCaseIdToCase")

  @@index([created_by_user_id], map: "Case_User_user_id_fk")
  @@index([account_id], map: "account_id")
  @@index([admin_assigned_id], map: "admin_assigned_id")
  @@index([group_id], map: "group_id")
}

model Case_Activity {
  case_activity_id       Int       @id @default(autoincrement())
  case_id                Int?
  action                 String?   @db.VarChar(255)
  data                   String?   @db.Text
  admin_id_action_author Int?      @default(0)
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  Case                   Case?     @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Case_Activity_ibfk_1")

  @@index([case_id], map: "case_id")
}

model Case_History {
  case       Int       @id @default(autoincrement())
  case_id    Int?
  admin_id   Int?
  assignedAt DateTime? @db.DateTime(0)
  removedAt  DateTime? @db.DateTime(0)
  Case       Case?     @relation(fields: [case_id], references: [case_id], onDelete: Restrict, onUpdate: Restrict, map: "Case_History_ibfk_1")
  Admin      Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Restrict, onUpdate: Restrict, map: "Case_History_ibfk_2")

  @@index([admin_id], map: "admin_id")
  @@index([case_id], map: "case_id")
}

model Case_Note {
  case_note_id Int       @id @default(autoincrement())
  case_id      Int?
  text         String?   @db.Text
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Case         Case?     @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Case_Note_ibfk_1")

  @@index([case_id], map: "case_id")
}

model Case_Session {
  case_session_id       Int       @id @default(autoincrement())
  case_id               Int?
  status                String?   @db.VarChar(255)
  start_time            DateTime? @db.DateTime(0)
  end_time              DateTime? @db.DateTime(0)
  duration              Int?
  start_admin_id_author Int?
  end_admin_id_author   Int?
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  Case                  Case?     @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Case_Session_ibfk_1")

  @@index([case_id], map: "case_id")
}

model Case_Tag {
  case_tag_id Int       @id @default(autoincrement())
  case_id     Int?
  tag_id      Int?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  Case        Case?     @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Case_Tag_ibfk_1")
  Tag         Tag?      @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade, map: "Case_Tag_ibfk_2")

  @@unique([case_id, tag_id], map: "Case_Tag_tag_id_case_id_unique")
  @@index([tag_id], map: "tag_id")
}

model Category {
  category_id        Int                @id @default(autoincrement())
  name               String?            @db.VarChar(255)
  account_id         Int?
  description        String?            @db.MediumText
  image              String?            @db.MediumText
  enabled            Boolean?           @default(true)
  createdAt          DateTime           @db.DateTime(0)
  updatedAt          DateTime           @db.DateTime(0)
  deletedAt          DateTime?          @db.DateTime(0)
  external_id        String?            @db.VarChar(150)
  brn                String?            @db.VarChar(255)
  parent_category_id Int?
  priority           Int?
  hide               Boolean?           @default(false)
  Account            Account?           @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Category_ibfk_1")
  Category_Product   Category_Product[]

  @@index([account_id], map: "account_id")
}

model Category_Product {
  category_product_id Int       @id @default(autoincrement())
  category_id         Int?
  product_id          Int?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Category            Category? @relation(fields: [category_id], references: [category_id], onDelete: Cascade, map: "Category_Product_ibfk_1")
  Product             Product?  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "Category_Product_ibfk_2")

  @@unique([category_id, product_id], map: "Category_Product_product_id_category_id_unique")
  @@index([product_id], map: "product_id")
}

model CentroDePago {
  centrodepago_id Int       @id @default(autoincrement())
  company_id      String?   @db.VarChar(255)
  branch_id       String?   @db.VarChar(255)
  user            String?   @db.VarChar(255)
  password        String?   @db.VarChar(255)
  key             String?   @db.VarChar(255)
  data0           String?   @db.VarChar(255)
  merchant_id     String?   @db.Char(36)
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  account_id      Int?
  Account         Account?  @relation(fields: [account_id], references: [account_id], map: "CentroDePago_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Certification {
  certification_id      Int                     @id @default(autoincrement())
  certification_exam_id Int?
  name                  String?                 @db.VarChar(255)
  title                 String?                 @db.VarChar(255)
  description           String?                 @db.Text
  enable                Boolean?
  createdAt             DateTime                @db.DateTime(0)
  updatedAt             DateTime                @db.DateTime(0)
  deletedAt             DateTime?               @db.DateTime(0)
  Certification_Exam    Certification_Exam?     @relation(fields: [certification_exam_id], references: [certification_exam_id], onDelete: Cascade, map: "Certification_ibfk_1")
  Partner_Certification Partner_Certification[]

  @@index([certification_exam_id], map: "certification_exam_id")
}

model Certification_Exam {
  certification_exam_id Int             @id @default(autoincrement())
  name                  String?         @db.VarChar(255)
  duration              Int?
  questions_number      Int?
  level                 Float?          @db.Float
  minimum_score         Float?          @db.Float
  version               Int?
  createdAt             DateTime        @db.DateTime(0)
  updatedAt             DateTime        @db.DateTime(0)
  deletedAt             DateTime?       @db.DateTime(0)
  Certification         Certification[]
  Exam_Question         Exam_Question[]
  Exam_Topic            Exam_Topic[]
}

model Certification_Resource {
  certification_resource_id Int              @id @default(autoincrement())
  name                      String?          @db.VarChar(255)
  description               String?          @db.Text
  image                     String?          @db.VarChar(255)
  difficulty                Int?
  level                     Float?           @db.Float
  url                       String?          @db.VarChar(255)
  type                      String?          @db.VarChar(255)
  duration                  Float?           @db.Float
  enabled                   Boolean?
  createdAt                 DateTime         @db.DateTime(0)
  updatedAt                 DateTime         @db.DateTime(0)
  deletedAt                 DateTime?        @db.DateTime(0)
  Resource_Topic            Resource_Topic[]
}

model Certification_Topic {
  c_t_id         Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  classification String?          @db.VarChar(255)
  createdAt      DateTime         @db.DateTime(0)
  updatedAt      DateTime         @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  Exam_Topic     Exam_Topic[]
  Question_Topic Question_Topic[]
  Resource_Topic Resource_Topic[]
}

model Chat_Activity {
  chat_activity_id Int            @id @default(autoincrement())
  account_id       Int?
  user_id          Int?
  order_id         Int?
  action           String?        @db.VarChar(255)
  template         String?        @db.VarChar(255)
  platform_id      Int?
  data             String?        @db.Text
  createdAt        DateTime       @db.DateTime(0)
  updatedAt        DateTime       @db.DateTime(0)
  deletedAt        DateTime?      @db.DateTime(0)
  Account          Account?       @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Chat_Activity_ibfk_1")
  User             User?          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Chat_Activity_ibfk_2")
  Generic_Order    Generic_Order? @relation(fields: [order_id], references: [order_id], onDelete: NoAction, map: "Chat_Activity_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([order_id], map: "order_id")
  @@index([user_id], map: "user_id")
}

model Clipboard {
  clipboard_id Int       @id @default(autoincrement())
  admin_id     Int?
  is_cut       Boolean?
  data         String?   @db.Text
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Admin        Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Restrict, onUpdate: Restrict, map: "Clipboard_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Component {
  component_id        Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(255)
  description         String?               @db.VarChar(255)
  icon                String?               @db.VarChar(255)
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  Milestone_Component Milestone_Component[]
}

model Conekta {
  conekta_id         Int       @id @default(autoincrement())
  account_id         Int?
  api_key            String?   @db.VarChar(255)
  sandbox_api_key    String?   @db.VarChar(255)
  is_sandbox         Boolean?  @default(false)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  public_key         String?   @db.VarChar(255)
  sandbox_public_key String?   @db.VarChar(255)
  Account            Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Conekta_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Configuration {
  configuration_id Int       @id @default(autoincrement())
  name             String?   @db.VarChar(255)
  value            String?   @db.Text
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
}

model Custom_Report {
  custom_report_id Int       @id @default(autoincrement())
  account_id       Int?
  name             String?   @db.VarChar(255)
  fields           String?   @db.Text
  time             String?   @db.VarChar(255)
  type             String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  brn              String?   @db.VarChar(255)
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Custom_Report_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Custom_View {
  custom_view_id      Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(255)
  description         String?               @db.VarChar(255)
  slug                String?               @db.VarChar(255)
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  account_id          Int?
  Account             Account?              @relation(fields: [account_id], references: [account_id], map: "Custom_View_ibfk_1")
  Custom_View_Account Custom_View_Account[]

  @@index([account_id], map: "account_id")
}

model Custom_View_Account {
  custom_view_account_id Int          @id @default(autoincrement())
  custom_view_id         Int?
  account_id             Int?
  createdAt              DateTime     @db.DateTime(0)
  updatedAt              DateTime     @db.DateTime(0)
  deletedAt              DateTime?    @db.DateTime(0)
  Custom_View            Custom_View? @relation(fields: [custom_view_id], references: [custom_view_id], onDelete: NoAction, map: "Custom_View_Account_ibfk_1")
  Account                Account?     @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Custom_View_Account_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([custom_view_id], map: "custom_view_id")
}

model Delivery_Basic {
  delivery_basic_id Int        @id @default(autoincrement())
  ecommerce_id      Int?
  delivery_price    Float?     @db.Float
  createdAt         DateTime   @db.DateTime(0)
  updatedAt         DateTime   @db.DateTime(0)
  deletedAt         DateTime?  @db.DateTime(0)
  stripe_account_id String?    @db.VarChar(255)
  Ecommerce         Ecommerce? @relation(fields: [ecommerce_id], references: [ecommerce_id], map: "Delivery_Basic_ibfk_1")

  @@index([ecommerce_id], map: "ecommerce_id")
}

model Delivery_Kanguro {
  delivery_kanguro_id Int        @id @default(autoincrement())
  ecommerce_id        Int?
  recolection_enable  Float?     @db.Float
  createdAt           DateTime   @db.DateTime(0)
  updatedAt           DateTime   @db.DateTime(0)
  deletedAt           DateTime?  @db.DateTime(0)
  stripe_account_id   String?    @db.VarChar(255)
  Ecommerce           Ecommerce? @relation(fields: [ecommerce_id], references: [ecommerce_id], map: "Delivery_Kanguro_ibfk_1")

  @@index([ecommerce_id], map: "ecommerce_id")
}

model Delivery_Type {
  delivery_type_id Int       @id @default(autoincrement())
  name             String?   @db.VarChar(255)
  title            String?   @db.VarChar(255)
  description      String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
}

model Ecommerce {
  ecommerce_id     Int                @id @default(autoincrement())
  account_id       Int?
  delivery_enabled Boolean?
  pickup_enabled   Boolean?
  delivery_type_id Int?
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  brn              String?            @db.VarChar(255)
  Delivery_Basic   Delivery_Basic[]
  Delivery_Kanguro Delivery_Kanguro[]
  Account          Account?           @relation(fields: [account_id], references: [account_id], map: "Ecommerce_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Element {
  element_id        Int                 @id @default(autoincrement())
  template_id       Int?
  type              String?             @db.VarChar(255)
  number            Int?
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  brn               String?             @db.VarChar(255)
  Template          Template?           @relation(fields: [template_id], references: [template_id], onDelete: NoAction, map: "Element_ibfk_1")
  Element_Attribute Element_Attribute[]
  Element_Connector Element_Connector[]

  @@index([template_id], map: "template_id")
}

model Element_Attribute {
  element_attribute_id   Int       @id @default(autoincrement())
  element_id             Int?
  name                   String?   @db.VarChar(255)
  value                  String?   @db.Text
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  language_id            Int?
  brn                    String?   @db.VarChar(255)
  facebook_attachment_id String?   @default("") @db.VarChar(255)
  Element                Element?  @relation(fields: [element_id], references: [element_id], onDelete: Cascade, map: "Element_Attribute_ibfk_1")

  @@index([element_id], map: "element_id")
}

model Element_Connector {
  element_connector_id Int       @id @default(autoincrement())
  element_id           Int?
  next_block_id        Int?
  title                String?   @db.VarChar(255)
  number               Int?
  type                 String?   @db.VarChar(255)
  image_url            String?   @db.VarChar(255)
  url                  String?   @db.MediumText
  is_extension         Boolean?
  size                 String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  user_attribute_id    Int?
  data                 String?   @db.Text
  language_id          Int?
  brn                  String?   @db.VarChar(255)
  Element              Element?  @relation(fields: [element_id], references: [element_id], onDelete: Cascade, map: "Element_Connector_ibfk_1")

  @@index([element_id], map: "element_id")
}

model Email_Template {
  email_template_id    Int       @id @default(autoincrement())
  external_template_id String?   @db.VarChar(255)
  name                 String?   @db.VarChar(255)
  title                String?   @db.VarChar(255)
  description          String?   @db.VarChar(255)
  email_platform       String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
}

model Entity {
  entity_id       Int              @id @default(autoincrement())
  name            String?          @db.VarChar(255)
  organization_id Int?
  createdAt       DateTime         @db.DateTime(0)
  updatedAt       DateTime         @db.DateTime(0)
  deletedAt       DateTime?        @db.DateTime(0)
  brn             String?          @db.VarChar(255)
  Account_Entity  Account_Entity[]
  Attribute       Attribute[]
  Organization    Organization?    @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, map: "Entity_ibfk_1")

  @@index([organization_id], map: "organization_id")
}

model Epayco {
  epayco_id   Int       @id @default(autoincrement())
  account_id  Int?
  public_key  String?   @db.VarChar(255)
  private_key String?   @db.VarChar(255)
  country     String?   @db.VarChar(255)
  is_test     Boolean?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Epayco_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Event {
  event_id  Int       @id @default(autoincrement())
  metric_id Int?
  platform  String?   @db.VarChar(255)
  user_id   Int?
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Metric    Metric?   @relation(fields: [metric_id], references: [metric_id], onDelete: NoAction, map: "Event_ibfk_1")

  @@index([metric_id], map: "metric_id")
}

model Event_Value {
  event_value_id      Int               @id @default(autoincrement())
  event_id            Int?
  metric_attribute_id Int?
  value               String?           @db.MediumText
  createdAt           DateTime          @db.DateTime(0)
  updatedAt           DateTime          @db.DateTime(0)
  deletedAt           DateTime?         @db.DateTime(0)
  account_id          Int?
  attribute_id        Int?
  Metric_Attribute    Metric_Attribute? @relation(fields: [metric_attribute_id], references: [metric_attribute_id], onDelete: Cascade, map: "Event_Value_ibfk_1")
  Account             Account?          @relation(fields: [account_id], references: [account_id], map: "Event_Value_ibfk_2")
  Attribute           Attribute?        @relation(fields: [attribute_id], references: [attribute_id], map: "Event_Value_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([attribute_id], map: "attribute_id")
  @@index([metric_attribute_id], map: "metric_attribute_id")
}

model Exam_Question {
  exam_question_id      Int                 @id @default(autoincrement())
  certification_exam_id Int?
  question_id           Int?
  createdAt             DateTime            @db.DateTime(0)
  updatedAt             DateTime            @db.DateTime(0)
  deletedAt             DateTime?           @db.DateTime(0)
  Certification_Exam    Certification_Exam? @relation(fields: [certification_exam_id], references: [certification_exam_id], onDelete: Cascade, map: "Exam_Question_ibfk_1")
  Question              Question?           @relation(fields: [question_id], references: [question_id], onDelete: NoAction, map: "Exam_Question_ibfk_2")

  @@unique([certification_exam_id, question_id], map: "Exam_Question_question_id_certification_exam_id_unique")
  @@index([question_id], map: "question_id")
}

model Exam_Topic {
  e_t_id                Int                  @id @default(autoincrement())
  certification_exam_id Int?
  c_t_id                Int?
  createdAt             DateTime             @db.DateTime(0)
  updatedAt             DateTime             @db.DateTime(0)
  deletedAt             DateTime?            @db.DateTime(0)
  Certification_Exam    Certification_Exam?  @relation(fields: [certification_exam_id], references: [certification_exam_id], onDelete: Cascade, map: "Exam_Topic_ibfk_1")
  Certification_Topic   Certification_Topic? @relation(fields: [c_t_id], references: [c_t_id], onDelete: Cascade, map: "Exam_Topic_ibfk_2")

  @@unique([certification_exam_id, c_t_id], map: "Exam_Topic_c_t_id_certification_exam_id_unique")
  @@index([c_t_id], map: "c_t_id")
}

model Extension {
  extension_id          Int                 @id @default(autoincrement())
  name                  String?             @db.VarChar(255)
  description           String?             @db.VarChar(255)
  arn                   String?             @db.VarChar(255)
  version               String?             @db.VarChar(255)
  status                String?             @db.VarChar(255)
  enviroment            String?             @db.VarChar(255)
  createdAt             DateTime            @db.DateTime(0)
  updatedAt             DateTime            @db.DateTime(0)
  deletedAt             DateTime?           @db.DateTime(0)
  extension_category_id Int?
  runtime               String?             @db.VarChar(255)
  input                 String?             @db.Text
  output                String?             @db.Text
  handler               String?             @db.VarChar(255)
  file_name             String?             @db.VarChar(255)
  Extension_Category    Extension_Category? @relation(fields: [extension_category_id], references: [extension_category_id], map: "Extension_ibfk_1")
  Extension_Account     Extension_Account[]

  @@index([extension_category_id], map: "extension_category_id")
}

model Extension_Account {
  extension_account_id Int        @id @default(autoincrement())
  extension_id         Int?
  account_id           Int?
  createdAt            DateTime   @db.DateTime(0)
  updatedAt            DateTime   @db.DateTime(0)
  deletedAt            DateTime?  @db.DateTime(0)
  Extension            Extension? @relation(fields: [extension_id], references: [extension_id], onDelete: Cascade, map: "Extension_Account_ibfk_1")
  Account              Account?   @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Extension_Account_ibfk_2")

  @@unique([extension_id, account_id], map: "Extension_Account_extension_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Extension_Category {
  extension_category_id Int         @id @default(autoincrement())
  name                  String?     @db.VarChar(255)
  description           String?     @db.VarChar(255)
  createdAt             DateTime    @db.DateTime(0)
  updatedAt             DateTime    @db.DateTime(0)
  deletedAt             DateTime?   @db.DateTime(0)
  Extension             Extension[]
}

model Facebook {
  facebook_id       Int       @id @default(autoincrement())
  name              String?   @db.VarChar(255)
  account_id        Int?
  page_id           String?   @db.VarChar(255)
  page_access_token String?   @db.VarChar(255)
  language_id       Int?
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  subscribed        Boolean?
  Account           Account?  @relation(fields: [account_id], references: [account_id], map: "Facebook_ibfk_1")
  Language          Language? @relation(fields: [language_id], references: [language_id], onDelete: NoAction, map: "Facebook_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([language_id], map: "language_id")
}

model Facebook_User {
  user_id               Int                  @id @default(autoincrement())
  first_name            String?              @db.VarChar(255)
  last_name             String?              @db.VarChar(255)
  profile_pic           String?              @db.VarChar(255)
  locale                String?              @db.VarChar(255)
  timezone              String?              @db.VarChar(255)
  gender                String?              @db.VarChar(255)
  account_id            Int?
  facebook_id           String?              @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?            @db.DateTime(0)
  sequence_step         Int?                 @default(0)
  is_subscribed         Boolean?
  createdAt             DateTime             @db.DateTime(0)
  updatedAt             DateTime             @db.DateTime(0)
  deletedAt             DateTime?            @db.DateTime(0)
  last_info_update      String?              @db.VarChar(255)
  Facebook_User_Case    Facebook_User_Case[]
}

model Facebook_User_Case {
  facebook_user_case_id Int            @id @default(autoincrement())
  user_id               Int?
  case_id               Int?
  createdAt             DateTime       @db.DateTime(0)
  updatedAt             DateTime       @db.DateTime(0)
  deletedAt             DateTime?      @db.DateTime(0)
  Facebook_User         Facebook_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Facebook_User_Case_ibfk_1")
  Case                  Case?          @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Facebook_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Facebook_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Feedback {
  feedback_id        Int       @id @default(autoincrement())
  account_id         Int?
  user_id            Int?
  unique_feedback_id String?   @db.VarChar(255)
  question           String?   @db.Text
  type               String?   @db.VarChar(255)
  additional_comment String?   @db.Text
  score              String?   @db.VarChar(255)
  scale              String?   @db.VarChar(255)
  answered           Boolean?
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  User               User?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Feedback_ibfk_1")

  @@index([user_id], map: "user_id")
}

model Filter {
  filter_id        Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  description      String?            @db.VarChar(255)
  account_id       Int?
  platform         String?            @db.VarChar(255)
  is_static        Boolean?
  users            String?            @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  logic_operator   String?            @db.VarChar(255)
  last_sent        DateTime?          @db.DateTime(0)
  Account          Account?           @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Filter_ibfk_1")
  Filter_Attribute Filter_Attribute[]

  @@index([account_id], map: "account_id")
}

model Filter_Attribute {
  filter_attribute_id Int       @id @default(autoincrement())
  filter_id           Int?
  user_attribute_id   Int?
  db_attribute_name   String?   @db.VarChar(255)
  value               String?   @db.VarChar(255)
  operator            String?   @db.VarChar(255)
  logic_operator      String?   @db.VarChar(255)
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Filter              Filter?   @relation(fields: [filter_id], references: [filter_id], onDelete: Cascade, map: "Filter_Attribute_ibfk_1")

  @@index([filter_id], map: "filter_id")
}

model Flow {
  flow_id           Int                 @id @default(autoincrement())
  account_id        Int?
  name              String?             @db.VarChar(255)
  default           Boolean?
  deletedAt         DateTime?           @db.DateTime(0)
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  version           Int?
  status            Boolean?
  flow_group_id     Int?
  starting_block    Int?
  brn               String?             @db.VarChar(255)
  Block             Block[]
  Account           Account?            @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Flow_ibfk_1")
  Flow_List         Flow_List[]
  Generic_User_Flow Generic_User_Flow[]
  User_Flow         User_Flow[]

  @@index([account_id], map: "account_id")
}

model Flow_Group {
  flow_group_id      Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  createdAt          DateTime             @db.DateTime(0)
  updatedAt          DateTime             @db.DateTime(0)
  deletedAt          DateTime?            @db.DateTime(0)
  brn                String?              @db.VarChar(255)
  Flow_Group_Account Flow_Group_Account[]
  Package_Flow_Group Package_Flow_Group[]
}

model Flow_Group_Account {
  flow_group_account_id Int         @id @default(autoincrement())
  flow_group_id         Int?
  account_id            Int?
  default               Boolean?
  createdAt             DateTime    @db.DateTime(0)
  updatedAt             DateTime    @db.DateTime(0)
  deletedAt             DateTime?   @db.DateTime(0)
  Flow_Group            Flow_Group? @relation(fields: [flow_group_id], references: [flow_group_id], onDelete: Cascade, map: "Flow_Group_Account_ibfk_1")
  Account               Account?    @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Flow_Group_Account_ibfk_2")

  @@unique([flow_group_id, account_id], map: "Flow_Group_Account_flow_group_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Flow_List {
  flow_list_id Int       @id @default(autoincrement())
  flow_id      Int?
  list_id      Int?
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Flow         Flow?     @relation(fields: [flow_id], references: [flow_id], onDelete: NoAction, map: "Flow_List_ibfk_1")

  @@index([flow_id], map: "flow_id")
}

model Follow_Up_Action {
  follow_up_action_id Int       @id @default(autoincrement())
  sequence_id         Int?
  after_time          Int?
  action              String?   @db.VarChar(255)
  payload             String?   @db.Text
  step                Int?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  brn                 String?   @db.VarChar(255)
  Sequence            Sequence? @relation(fields: [sequence_id], references: [sequence_id], onDelete: NoAction, map: "Follow_Up_Action_ibfk_1")

  @@index([sequence_id], map: "sequence_id")
}

model Generic_Event {
  event_id  Int       @id @default(autoincrement())
  metric_id Int?
  platform  String?   @db.VarChar(255)
  user_id   Int?
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Metric    Metric?   @relation(fields: [metric_id], references: [metric_id], onDelete: NoAction, map: "Generic_Event_ibfk_1")
  User      User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_Event_ibfk_2")

  @@index([metric_id], map: "metric_id")
  @@index([user_id], map: "user_id")
}

model Generic_Order {
  order_id               Int              @id @default(autoincrement())
  account_id             Int?
  card_id                Int?
  address_id             Int?
  total                  Float?           @db.Float
  total_final            Float?           @db.Float
  reference              String?          @db.VarChar(255)
  status                 String?          @db.VarChar(255)
  latitude_request       String?          @db.VarChar(255)
  longitude_request      String?          @db.VarChar(255)
  delivery_type          String?          @db.VarChar(255)
  delivery_latitude      String?          @db.VarChar(255)
  delivery_longitude     String?          @db.VarChar(255)
  delivery_address       String?          @db.VarChar(255)
  extra_message          String?          @db.VarChar(255)
  pickup_location_id     Int?
  delivery_price         Float?           @default(0) @db.Float
  discount               Float?           @default(0) @db.Float
  client_phone           String?          @db.VarChar(255)
  delivery_street_number String?          @db.VarChar(255)
  delivery_street        String?          @db.VarChar(255)
  delivery_colony        String?          @db.VarChar(255)
  delivery_state         String?          @db.VarChar(255)
  delivery_city          String?          @db.VarChar(255)
  delivery_postal_code   String?          @db.VarChar(255)
  delivery_country       String?          @db.VarChar(255)
  payment_url            String?          @db.Text
  admin_status           String?          @db.VarChar(255)
  user_id                Int?
  platform               String?          @db.VarChar(255)
  payment_platform       String?          @db.VarChar(255)
  createdAt              DateTime         @db.DateTime(0)
  updatedAt              DateTime         @db.DateTime(0)
  deletedAt              DateTime?        @db.DateTime(0)
  name                   String?          @db.VarChar(255)
  email                  String?          @db.VarChar(255)
  cell_phone             String?          @db.VarChar(255)
  home_phone             String?          @db.VarChar(255)
  track_id               String?          @db.VarChar(255)
  kanguro_order_id       String?          @db.VarChar(255)
  track_url              String?          @db.VarChar(255)
  stripe_intent          String?          @db.VarChar(255)
  merchant_id            String?          @db.Char(36)
  currency               String?          @default("MXN") @db.VarChar(255)
  extra_cost             Float?           @db.Float
  Chat_Activity          Chat_Activity[]
  Account                Account?         @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Generic_Order_ibfk_1")
  Pickup_Location        Pickup_Location? @relation(fields: [pickup_location_id], references: [pickup_location_id], onDelete: NoAction, map: "Generic_Order_ibfk_2")
  User                   User?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_Order_ibfk_3")
  Shipping               Shipping[]

  @@index([account_id], map: "account_id")
  @@index([pickup_location_id], map: "pickup_location_id")
  @@index([user_id], map: "user_id")
}

model Generic_Response {
  response_id Int       @id @default(autoincrement())
  block_id    Int?
  user_id     Int?
  account_id  Int?
  message     String?   @db.VarChar(255)
  author      String?   @db.VarChar(255)
  platform    String?   @db.VarChar(255)
  intent      String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  Block       Block?    @relation(fields: [block_id], references: [block_id], onDelete: NoAction, map: "Generic_Response_ibfk_1")
  User        User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_Response_ibfk_2")
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Generic_Response_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([block_id], map: "block_id")
  @@index([user_id], map: "user_id")
}

model Generic_Sent_Payment {
  sent_payment_id    Int       @id @default(autoincrement())
  reference          String?   @db.VarChar(255)
  cadena_pago        String?   @db.VarChar(255)
  template_id        Int?
  pay_user           String?   @db.VarChar(255)
  user_id            Int?
  platform           String?   @db.VarChar(255)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  stripe_id          Int?      @default(0)
  paypal_id          String?   @db.VarChar(255)
  merchant_id        String?   @db.Char(36)
  payload            String?   @db.Text
  error              String?   @db.VarChar(255)
  order_id           Int?
  id_reference       String?   @db.Char(36)
  currency           String?   @db.VarChar(255)
  payment_type       String?   @db.VarChar(255)
  station            String?   @db.VarChar(255)
  amount             Float?    @db.Float
  id_url             String?   @db.VarChar(255)
  status             String?   @db.VarChar(255)
  conekta_id         String?   @db.VarChar(255)
  mit_online         Boolean?
  mol_proccessed     Boolean?
  mol_attempts       Int?
  process_mit_online Boolean?
  payment_platform   String?   @db.VarChar(255)
  Template           Template? @relation(fields: [template_id], references: [template_id], onDelete: NoAction, map: "Generic_Sent_Payment_ibfk_1")
  User               User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_Sent_Payment_ibfk_2")

  @@index([template_id], map: "template_id")
  @@index([user_id], map: "user_id")
}

model Generic_User_Attribute_Value {
  user_attribute_value_id Int             @id @default(autoincrement())
  user_attribute_id       Int?
  value                   String?         @db.MediumText
  user_id                 Int?
  platform                String?         @db.VarChar(255)
  createdAt               DateTime        @db.DateTime(0)
  updatedAt               DateTime        @db.DateTime(0)
  deletedAt               DateTime?       @db.DateTime(0)
  cipher                  String?         @db.Text
  User_Attribute          User_Attribute? @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Generic_User_Attribute_Value_ibfk_1")
  User                    User?           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_User_Attribute_Value_ibfk_2")

  @@index([user_attribute_id], map: "user_attribute_id")
  @@index([user_id], map: "user_id")
}

model Generic_User_Flow {
  user_flow_id     Int       @id @default(autoincrement())
  user_id          Int?
  account_id       Int?
  flow_id          Int?
  current_block_id Int?
  done             Boolean?
  active           Boolean?
  platform         String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  User             User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Generic_User_Flow_ibfk_1")
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Generic_User_Flow_ibfk_2")
  Flow             Flow?     @relation(fields: [flow_id], references: [flow_id], onDelete: NoAction, map: "Generic_User_Flow_ibfk_3")
  Block            Block?    @relation(fields: [current_block_id], references: [block_id], onDelete: NoAction, map: "Generic_User_Flow_ibfk_4")

  @@index([account_id], map: "account_id")
  @@index([current_block_id], map: "current_block_id")
  @@index([flow_id], map: "flow_id")
  @@index([user_id], map: "user_id")
}

model Genesys {
  genesys_id     Int       @id @default(autoincrement())
  account_id     Int?
  name           String?   @db.VarChar(255)
  subscribed     String?   @db.VarChar(255)
  client_url     String?   @db.VarChar(255)
  deployment_key String?   @db.VarChar(255)
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime  @db.DateTime(0)
  deletedAt      DateTime? @db.DateTime(0)
  Account        Account?  @relation(fields: [account_id], references: [account_id], onDelete: Restrict, onUpdate: Restrict, map: "Genesys_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Group {
  group_id                Int                       @id @default(autoincrement())
  name                    String?                   @db.VarChar(255)
  description             String?                   @db.VarChar(255)
  image                   String?                   @db.VarChar(255)
  color                   String?                   @db.VarChar(255)
  createdAt               DateTime                  @db.DateTime(0)
  updatedAt               DateTime                  @db.DateTime(0)
  deletedAt               DateTime?                 @db.DateTime(0)
  account_id              Int?
  brn                     String?                   @db.VarChar(255)
  case_time_out           Float?                    @db.Float
  smartassign_enabled     Boolean?                  @default(true)
  Admin_Group             Admin_Group[]
  Case                    Case[]
  Keyword                 Keyword[]
  Response_Template_Group Response_Template_Group[]
  Tag_Category_Group      Tag_Category_Group[]
}

model Guest_User {
  user_id               Int               @id @default(autoincrement())
  ip                    String?           @db.VarChar(255)
  container             String?           @db.VarChar(255)
  account_id            Int?
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?         @db.DateTime(0)
  sequence_step         Int?              @default(0)
  createdAt             DateTime          @db.DateTime(0)
  updatedAt             DateTime          @db.DateTime(0)
  deletedAt             DateTime?         @db.DateTime(0)
  first_name            String?           @db.VarChar(150)
  last_name             String?           @db.VarChar(150)
  gender                String?           @db.VarChar(150)
  profile_pic           String?           @db.VarChar(150)
  is_subscribed         Boolean?
  last_info_update      String?           @db.VarChar(255)
  Account               Account?          @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Guest_User_ibfk_1")
  Sequence              Sequence?         @relation(fields: [sequence_id], references: [sequence_id], map: "Guest_User_ibfk_2")
  Guest_User_Case       Guest_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Guest_User_Case {
  twitter_user_case_id Int         @id @default(autoincrement())
  user_id              Int?
  case_id              Int?
  createdAt            DateTime    @db.DateTime(0)
  updatedAt            DateTime    @db.DateTime(0)
  deletedAt            DateTime?   @db.DateTime(0)
  Guest_User           Guest_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Guest_User_Case_ibfk_1")
  Case                 Case?       @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Guest_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Guest_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model H4Mail {
  h4mail_id  Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  token      String?   @db.VarChar(255)
  email      String?   @db.VarChar(255)
  subscribed Boolean?
  mail_id    String?   @db.VarChar(255)
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  account_id Int?
  Account    Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "H4Mail_ibfk_1")

  @@index([account_id], map: "account_id")
}

model H4Mail_User {
  user_id               Int                @id @default(autoincrement())
  first_name            String?            @db.VarChar(255)
  last_name             String?            @db.VarChar(255)
  email                 String?            @db.VarChar(255)
  account_id            Int?
  gender                String?            @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?          @db.DateTime(0)
  sequence_step         Int?               @default(0)
  is_subscribed         Boolean?
  last_info_update      DateTime?          @db.DateTime(0)
  createdAt             DateTime           @db.DateTime(0)
  updatedAt             DateTime           @db.DateTime(0)
  deletedAt             DateTime?          @db.DateTime(0)
  Account               Account?           @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "H4Mail_User_ibfk_1")
  Sequence              Sequence?          @relation(fields: [sequence_id], references: [sequence_id], map: "H4Mail_User_ibfk_2")
  H4Mail_User_Case      H4Mail_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model H4Mail_User_Case {
  h4mail_user_case_id Int          @id @default(autoincrement())
  user_id             Int?
  case_id             Int?
  createdAt           DateTime     @db.DateTime(0)
  updatedAt           DateTime     @db.DateTime(0)
  deletedAt           DateTime?    @db.DateTime(0)
  H4Mail_User         H4Mail_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "H4Mail_User_Case_ibfk_1")
  Case                Case?        @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "H4Mail_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "H4Mail_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Image {
  image_id  Int       @id @default(autoincrement())
  url       String?   @db.VarChar(255)
  name      String?   @db.VarChar(255)
  type_id   Int?
  type      String?   @db.VarChar(255)
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Product   Product?  @relation(fields: [type_id], references: [product_id], onDelete: Cascade, onUpdate: Restrict, map: "Image_ibfk_1")

  @@index([type_id], map: "type_id")
}

model Instagram {
  instagram_id          Int       @id @default(autoincrement())
  name                  String?   @db.VarChar(255)
  account_id            Int?
  page_id               String?   @db.VarChar(255)
  instagram_business_id String?   @db.VarChar(255)
  user_access_token     String?   @db.VarChar(255)
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  language_id           Int?
  subscribed            Boolean?
  page_access_token     String?   @db.VarChar(255)
  Account               Account?  @relation(fields: [account_id], references: [account_id], map: "Instagram_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Instagram_DM {
  instagram_dm_id       Int       @id @default(autoincrement())
  account_id            Int?
  language_id           Int?
  name                  String?   @db.VarChar(255)
  page_id               String?   @db.VarChar(255)
  instagram_business_id String?   @db.VarChar(255)
  page_access_token     String?   @db.VarChar(255)
  subscribed            Boolean?
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  Account               Account?  @relation(fields: [account_id], references: [account_id], onDelete: Restrict, onUpdate: Restrict, map: "Instagram_DM_ibfk_1")
  Language              Language? @relation(fields: [language_id], references: [language_id], onDelete: Restrict, onUpdate: Restrict, map: "Instagram_DM_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([language_id], map: "language_id")
}

model Instagram_User {
  user_id               Int                   @id @default(autoincrement())
  first_name            String?               @db.VarChar(255)
  last_name             String?               @db.VarChar(255)
  profile_pic           String?               @db.VarChar(255)
  locale                String?               @db.VarChar(255)
  timezone              String?               @db.VarChar(255)
  gender                String?               @db.VarChar(255)
  account_id            Int?
  instagram_id          String?               @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?             @db.DateTime(0)
  sequence_step         Int?                  @default(0)
  is_subscribed         Boolean?
  last_info_update      DateTime?             @db.DateTime(0)
  createdAt             DateTime              @db.DateTime(0)
  updatedAt             DateTime              @db.DateTime(0)
  deletedAt             DateTime?             @db.DateTime(0)
  Account               Account?              @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Instagram_User_ibfk_1")
  Instagram_User_Case   Instagram_User_Case[]

  @@index([account_id], map: "account_id")
}

model Instagram_User_Case {
  instagram_user_case_id                    Int             @id @default(autoincrement())
  user_id                                   Int?
  case_id                                   Int?
  createdAt                                 DateTime        @db.DateTime(0)
  updatedAt                                 DateTime        @db.DateTime(0)
  deletedAt                                 DateTime?       @db.DateTime(0)
  CaseCaseId                                Int?
  Instagram_User                            Instagram_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Instagram_User_Case_ibfk_1")
  Case_Instagram_User_Case_case_idToCase    Case?           @relation("Instagram_User_Case_case_idToCase", fields: [case_id], references: [case_id], onDelete: NoAction, map: "Instagram_User_Case_ibfk_2")
  Case_Instagram_User_Case_CaseCaseIdToCase Case?           @relation("Instagram_User_Case_CaseCaseIdToCase", fields: [CaseCaseId], references: [case_id], onDelete: Cascade, map: "Instagram_User_Case_ibfk_3")

  @@unique([user_id, CaseCaseId], map: "Instagram_User_Case_user_id_CaseCaseId_unique")
  @@index([CaseCaseId], map: "CaseCaseId")
  @@index([case_id], map: "case_id")
}

model Intent_Event {
  intent_event_id Int       @id @default(autoincrement())
  account_id      Int?
  platform        String?   @db.VarChar(255)
  user_id         Int?
  text            String?   @db.Text
  intent          String?   @db.VarChar(255)
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  Account         Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Intent_Event_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Invoice {
  invoice_id        Int       @id @default(autoincrement())
  account_id        Int?
  partner_id        Int?
  total_paid        Float?    @db.Float
  partner_commision Float?    @db.Float
  level_on_payment  Int?
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  Partner           Partner?  @relation(fields: [partner_id], references: [partner_id], onDelete: Cascade, map: "Invoice_ibfk_1")

  @@index([partner_id], map: "partner_id")
}

model Item {
  item_id      Int            @id @default(autoincrement())
  order_id     Int?
  product_id   Int?
  quantity     Int?           @db.TinyInt
  createdAt    DateTime       @db.DateTime(0)
  updatedAt    DateTime       @db.DateTime(0)
  deletedAt    DateTime?      @db.DateTime(0)
  extra_info   String?        @db.Text
  Order        Order?         @relation(fields: [order_id], references: [order_id], onDelete: NoAction, map: "Item_ibfk_1")
  Product      Product?       @relation(fields: [product_id], references: [product_id], onDelete: NoAction, map: "Item_ibfk_2")
  Item_Variant Item_Variant[]

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model Item_Variant {
  item_variant_id    Int       @id @default(autoincrement())
  item_id            Int?
  product_variant_id Int?
  quantity           Int?      @db.TinyInt
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  order_id           Int?
  extra_info         String?   @db.Text
  Item               Item?     @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "Item_Variant_ibfk_1")

  @@index([item_id], map: "item_id")
}

model Keyword {
  keyword_id Int       @id @default(autoincrement())
  account_id Int?
  text       String?   @db.VarChar(255)
  group_id   Int?
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  Account    Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Keyword_ibfk_1")
  Group      Group?    @relation(fields: [group_id], references: [group_id], onDelete: Cascade, map: "Keyword_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([group_id], map: "group_id")
}

model Knowledge {
  knowledge_id  Int       @id @default(autoincrement())
  account_id    Int?
  name          String?   @db.VarChar(255)
  app_id        String?   @db.VarChar(255)
  api_token     String?   @db.VarChar(255)
  refresh_token String?   @db.VarChar(255)
  enable        Boolean?
  deletedAt     DateTime? @db.DateTime(0)
  brn           String?   @db.VarChar(255)
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  status        String?   @db.VarChar(255)
  Account       Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Knowledge_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Label {
  label_id    Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  color       String?   @db.VarChar(255)
  emoji       String?   @db.VarChar(255)
  account_id  Int?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  brn         String?   @db.VarChar(255)
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Label_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Lambda {
  lambda_id   Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  description String?   @db.VarChar(255)
  account_id  Int?
  arn         String?   @db.VarChar(255)
  version     String?   @db.VarChar(255)
  status      String?   @db.VarChar(255)
  runtime     String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  isSimple    Boolean?
  brn         String?   @db.VarChar(255)
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Lambda_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Language {
  language_id      Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  locale           String?            @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  code             String?            @db.VarChar(255)
  Facebook         Facebook[]
  Instagram_DM     Instagram_DM[]
  Language_Account Language_Account[]
}

model Language_Account {
  language_account_id Int       @id @default(autoincrement())
  language_id         Int?
  account_id          Int?
  enabled             Boolean?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Language            Language? @relation(fields: [language_id], references: [language_id], onDelete: Cascade, map: "Language_Account_ibfk_1")
  Account             Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Language_Account_ibfk_2")

  @@unique([language_id, account_id], map: "Language_Account_language_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model MIT_credential {
  mit_credential_id     Int                     @id @default(autoincrement())
  company_id            String?                 @db.VarChar(255)
  branch_id             String?                 @db.VarChar(255)
  user                  String?                 @db.VarChar(255)
  password              String?                 @db.VarChar(255)
  key                   String?                 @db.VarChar(255)
  data0                 String?                 @db.VarChar(255)
  is_sandbox            Boolean?                @default(false)
  merchant              String?                 @db.VarChar(255)
  createdAt             DateTime                @db.DateTime(0)
  updatedAt             DateTime                @db.DateTime(0)
  deletedAt             DateTime?               @db.DateTime(0)
  account_id            Int?
  Account_MITcredential Account_MITcredential[]
}

model Messenger {
  messenger_id      Int       @id @default(autoincrement())
  name              String?   @db.VarChar(255)
  account_id        Int?
  facebook_id       String?   @db.VarChar(255)
  page_access_token String?   @db.VarChar(255)
  image             String?   @db.Text
  subscribed        Boolean?
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  Account           Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Messenger_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Messenger_User {
  user_id               Int                   @id @default(autoincrement())
  first_name            String?               @db.VarChar(255)
  last_name             String?               @db.VarChar(255)
  profile_pic           String?               @db.VarChar(255)
  locale                String?               @db.VarChar(255)
  timezone              String?               @db.VarChar(255)
  gender                String?               @db.VarChar(255)
  account_id            Int?
  messenger_id          String?               @db.VarChar(255)
  bot_enabled           Boolean?
  createdAt             DateTime              @db.DateTime(0)
  updatedAt             DateTime              @db.DateTime(0)
  deletedAt             DateTime?             @db.DateTime(0)
  last_interaction_time DateTime?             @db.DateTime(0)
  sequence_step         Int?                  @default(0)
  sequence_id           Int?
  is_subscribed         Boolean?              @default(true)
  last_info_update      String?               @db.VarChar(255)
  Sequence              Sequence?             @relation(fields: [sequence_id], references: [sequence_id], onDelete: Restrict, onUpdate: Restrict, map: "User_Sequence_sequence_id_fk")
  Messenger_User_Case   Messenger_User_Case[]
  Payment               Payment[]
  Process               Process[]
  Sent_Payment          Sent_Payment[]

  @@index([sequence_id], map: "User_Sequence_sequence_id_fk")
}

model Messenger_User_Case {
  messenger_user_case_id Int             @id @default(autoincrement())
  user_id                Int?
  case_id                Int?
  createdAt              DateTime        @db.DateTime(0)
  updatedAt              DateTime        @db.DateTime(0)
  deletedAt              DateTime?       @db.DateTime(0)
  Messenger_User         Messenger_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Messenger_User_Case_ibfk_1")
  Case                   Case?           @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Messenger_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Messenger_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Metric {
  metric_id        Int                @id @default(autoincrement())
  account_id       Int?
  name             String?            @db.VarChar(255)
  color            String?            @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  parent_id        Int?
  show             Boolean?           @default(true)
  brn              String?            @db.VarChar(255)
  description      String?            @db.Text
  Event            Event[]
  Generic_Event    Generic_Event[]
  Account          Account?           @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Metric_ibfk_1")
  Metric_Attribute Metric_Attribute[]

  @@index([account_id], map: "account_id")
}

model Metric_Attribute {
  metric_attribute_id Int             @id @default(autoincrement())
  name                String?         @db.VarChar(255)
  type                String?         @db.VarChar(255)
  metric_id           Int?
  user_attribute_id   Int?
  position            Int?
  createdAt           DateTime        @db.DateTime(0)
  updatedAt           DateTime        @db.DateTime(0)
  deletedAt           DateTime?       @db.DateTime(0)
  brn                 String?         @db.VarChar(255)
  show_graph          Boolean?        @default(true)
  graph_type          String?         @default("horizontalBar") @db.VarChar(255)
  Event_Value         Event_Value[]
  Metric              Metric?         @relation(fields: [metric_id], references: [metric_id], onDelete: Cascade, map: "Metric_Attribute_ibfk_1")
  User_Attribute      User_Attribute? @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Metric_Attribute_ibfk_2")

  @@index([metric_id], map: "metric_id")
  @@index([user_attribute_id], map: "user_attribute_id")
}

model Milestone {
  milestone_id        Int                   @id @default(autoincrement())
  type                String?               @db.VarChar(255)
  status              String?               @db.VarChar(255)
  title               String?               @db.VarChar(255)
  description         String?               @db.Text
  scheduled_date      DateTime?             @db.DateTime(0)
  published_date      DateTime?             @db.DateTime(0)
  notify              Boolean?
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  Milestone_Component Milestone_Component[]
  Milestone_Role      Milestone_Role[]
  Milestone_Service   Milestone_Service[]
}

model Milestone_Component {
  milestone_role_id Int        @id @default(autoincrement())
  milestone_id      Int?
  component_id      Int?
  createdAt         DateTime   @db.DateTime(0)
  updatedAt         DateTime   @db.DateTime(0)
  deletedAt         DateTime?  @db.DateTime(0)
  Milestone         Milestone? @relation(fields: [milestone_id], references: [milestone_id], onDelete: Cascade, map: "Milestone_Component_ibfk_1")
  Component         Component? @relation(fields: [component_id], references: [component_id], onDelete: Cascade, map: "Milestone_Component_ibfk_2")

  @@unique([milestone_id, component_id], map: "Milestone_Component_milestone_id_component_id_unique")
  @@index([component_id], map: "component_id")
}

model Milestone_Role {
  milestone_role_id Int        @id @default(autoincrement())
  milestone_id      Int?
  role_id           Int?
  createdAt         DateTime   @db.DateTime(0)
  updatedAt         DateTime   @db.DateTime(0)
  deletedAt         DateTime?  @db.DateTime(0)
  Milestone         Milestone? @relation(fields: [milestone_id], references: [milestone_id], onDelete: Cascade, map: "Milestone_Role_ibfk_1")
  Role              Role?      @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "Milestone_Role_ibfk_2")

  @@unique([milestone_id, role_id], map: "Milestone_Role_role_id_milestone_id_unique")
  @@index([role_id], map: "role_id")
}

model Milestone_Service {
  milestone_service_id Int        @id @default(autoincrement())
  milestone_id         Int?
  service_id           Int?
  createdAt            DateTime   @db.DateTime(0)
  updatedAt            DateTime   @db.DateTime(0)
  deletedAt            DateTime?  @db.DateTime(0)
  Milestone            Milestone? @relation(fields: [milestone_id], references: [milestone_id], onDelete: Cascade, map: "Milestone_Service_ibfk_1")
  Service              Service?   @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "Milestone_Service_ibfk_2")

  @@unique([milestone_id, service_id], map: "Milestone_Service_service_id_milestone_id_unique")
  @@index([service_id], map: "service_id")
}

model Monday_Board {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  board_id     String         @unique @db.VarChar(255)
  close_group  String         @db.VarChar(255)
  Monday_Group Monday_Group[]

  @@index([board_id], map: "board_id")
}

model Monday_Group {
  id           Int           @id @default(autoincrement())
  group        String        @db.VarChar(255)
  board_id     String?       @db.VarChar(255)
  Monday_Board Monday_Board? @relation(fields: [board_id], references: [board_id], onDelete: Cascade)

  @@index([board_id], map: "board_id")
}

model Nerds_Admins {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  token    String @unique
}

model Niubiz {
  niubiz_id   Int       @id @default(autoincrement())
  account_id  Int?
  username    String?   @db.VarChar(255)
  password    String?   @db.VarChar(255)
  merchantId  String?   @db.VarChar(255)
  is_test     Boolean?
  deletedAt   DateTime? @db.DateTime(0)
  createdAt   DateTime? @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
  expire_time Int?      @default(10)
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Restrict, onUpdate: Restrict, map: "Niubiz_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  account_id      Int?
  admin_id        Int?
  type            String?   @db.VarChar(255)
  type_id         Int?
  title           String?   @db.VarChar(255)
  description     String?   @db.VarChar(255)
  read            Boolean?
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  Admin           Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade, map: "Notification_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Order {
  order_id               Int       @id @default(autoincrement())
  account_id             Int?
  card_id                Int?
  address_id             Int?
  total                  Float?    @db.Float
  total_final            Float?    @db.Float
  reference              String?   @db.VarChar(255)
  status                 String?   @db.VarChar(255)
  latitude_request       String?   @db.VarChar(255)
  longitude_request      String?   @db.VarChar(255)
  delivery_type          String?   @db.VarChar(255)
  delivery_latitude      String?   @db.VarChar(255)
  delivery_longitude     String?   @db.VarChar(255)
  delivery_address       String?   @db.VarChar(255)
  extra_message          String?   @db.VarChar(255)
  pickup_location_id     Int?
  delivery_price         Decimal?  @db.Decimal(10, 0)
  discount               Float?    @db.Float
  client_phone           String?   @db.VarChar(255)
  delivery_street_number String?   @db.VarChar(255)
  delivery_street        String?   @db.VarChar(255)
  delivery_colony        String?   @db.VarChar(255)
  delivery_state         String?   @db.VarChar(255)
  delivery_city          String?   @db.VarChar(255)
  delivery_postal_code   String?   @db.VarChar(255)
  delivery_country       String?   @db.VarChar(255)
  payment_url            String?   @db.Text
  admin_status           String?   @db.VarChar(255)
  user_id                Int?
  platform               String?   @db.VarChar(255)
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  payment_platform       String?   @db.VarChar(150)
  merchant_id            String?   @db.Char(36)
  currency               String?   @default("MXN") @db.VarChar(255)
  Item                   Item[]
  Account                Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Order_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Organization {
  organization_id      Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(255)
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  service_id           Int?
  status               String?                @db.VarChar(150)
  partner_id           Int?
  Access_Rule          Access_Rule[]
  Account              Account[]
  Admin_Organization   Admin_Organization[]
  Card                 Card[]
  Entity               Entity[]
  Organization_Billing Organization_Billing[]
  Plugin_Organization  Plugin_Organization[]
  Subscription_Payment Subscription_Payment[]
}

model Organization_Billing {
  organization_billing_id Int           @id @default(autoincrement())
  organization_id         Int?
  subscription_id         Int?
  expire_date             DateTime?     @db.DateTime(0)
  createdAt               DateTime      @db.DateTime(0)
  updatedAt               DateTime      @db.DateTime(0)
  deletedAt               DateTime?     @db.DateTime(0)
  status                  String?       @db.VarChar(150)
  Organization            Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, map: "Organization_Billing_ibfk_1")
  Subscription            Subscription? @relation(fields: [subscription_id], references: [subscription_id], onDelete: Cascade, map: "Organization_Billing_ibfk_2")

  @@index([organization_id], map: "organization_id")
  @@index([subscription_id], map: "subscription_id")
}

model Package {
  package_id             Int                      @id @default(autoincrement())
  name                   String?                  @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  category               String?                  @db.VarChar(255)
  creator                String?                  @db.VarChar(255)
  createdAt              DateTime                 @db.DateTime(0)
  updatedAt              DateTime                 @db.DateTime(0)
  deletedAt              DateTime?                @db.DateTime(0)
  image                  String?                  @db.VarChar(250)
  account_id             Int?
  type                   String?                  @db.VarChar(255)
  Package_Attribute      Package_Attribute[]
  Package_Flow_Group     Package_Flow_Group[]
  Package_Sequence       Package_Sequence[]
  Package_User_Attribute Package_User_Attribute[]
  Partner_Package        Partner_Package?
}

model Package_Attribute {
  package_attribute_id Int       @id @default(autoincrement())
  package_id           Int?
  type                 String?   @db.VarChar(255)
  required             Boolean?
  description          String?   @db.VarChar(255)
  name                 String?   @db.VarChar(255)
  value                String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  frontend_type        String?   @db.VarChar(150)
  title                String?   @db.VarChar(150)
  Package              Package?  @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "Package_Attribute_ibfk_1")

  @@index([package_id], map: "package_id")
}

model Package_Flow_Group {
  package_flow_group_id Int         @id @default(autoincrement())
  package_id            Int?
  flow_group_id         Int?
  createdAt             DateTime    @db.DateTime(0)
  updatedAt             DateTime    @db.DateTime(0)
  deletedAt             DateTime?   @db.DateTime(0)
  Package               Package?    @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "Package_Flow_Group_ibfk_1")
  Flow_Group            Flow_Group? @relation(fields: [flow_group_id], references: [flow_group_id], onDelete: Cascade, map: "Package_Flow_Group_ibfk_2")

  @@unique([package_id, flow_group_id], map: "Package_Flow_Group_package_id_flow_group_id_unique")
  @@index([flow_group_id], map: "flow_group_id")
}

model Package_Sequence {
  package_sequence_id Int       @id @default(autoincrement())
  package_id          Int?
  sequence_id         Int?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Package             Package?  @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "Package_Sequence_ibfk_1")
  Sequence            Sequence? @relation(fields: [sequence_id], references: [sequence_id], onDelete: Cascade, map: "Package_Sequence_ibfk_2")

  @@unique([package_id, sequence_id], map: "Package_Sequence_sequence_id_package_id_unique")
  @@index([sequence_id], map: "sequence_id")
}

model Package_User_Attribute {
  package_user_attribute_id                                                          Int             @id @default(autoincrement())
  package_id                                                                         Int?
  user_attribute_id                                                                  Int?
  createdAt                                                                          DateTime        @db.DateTime(0)
  updatedAt                                                                          DateTime        @db.DateTime(0)
  deletedAt                                                                          DateTime?       @db.DateTime(0)
  UserAttributeUserAttributeId                                                       Int?
  Package                                                                            Package?        @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "Package_User_Attribute_ibfk_1")
  User_Attribute_Package_User_Attribute_user_attribute_idToUser_Attribute            User_Attribute? @relation("Package_User_Attribute_user_attribute_idToUser_Attribute", fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Package_User_Attribute_ibfk_2")
  User_Attribute_Package_User_Attribute_UserAttributeUserAttributeIdToUser_Attribute User_Attribute? @relation("Package_User_Attribute_UserAttributeUserAttributeIdToUser_Attribute", fields: [UserAttributeUserAttributeId], references: [user_attribute_id], onDelete: Cascade, map: "Package_User_Attribute_ibfk_3")

  @@index([UserAttributeUserAttributeId], map: "UserAttributeUserAttributeId")
  @@index([package_id], map: "package_id")
  @@index([user_attribute_id], map: "user_attribute_id")
}

model Parameter {
  parameter_id      Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  code              String?             @db.VarChar(255)
  type              String?             @default("general") @db.VarChar(255)
  description       String?             @db.VarChar(255)
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  data_type         String?             @default("string") @db.VarChar(150)
  Account_Parameter Account_Parameter[]
  Parameter_Value   Parameter_Value[]
}

model Parameter_Value {
  parameter_value_id Int        @id @default(autoincrement())
  parameter_id       Int?
  account_id         Int?
  value              String?    @db.Text
  createdAt          DateTime   @db.DateTime(0)
  updatedAt          DateTime   @db.DateTime(0)
  deletedAt          DateTime?  @db.DateTime(0)
  brn                String?    @db.VarChar(255)
  Parameter          Parameter? @relation(fields: [parameter_id], references: [parameter_id], onDelete: Cascade, map: "Parameter_Value_ibfk_1")
  Account            Account?   @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Parameter_Value_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([parameter_id], map: "parameter_id")
}

model Partner {
  partner_id                                    Int                     @id @default(autoincrement())
  service_id                                    Int?
  business_logo                                 String?                 @db.VarChar(255)
  business_name                                 String?                 @db.VarChar(255)
  business_email                                String?                 @db.VarChar(255)
  business_address                              String?                 @db.VarChar(255)
  size                                          String?                 @db.VarChar(255)
  description                                   String?                 @db.Text
  clients_size                                  String?                 @db.VarChar(255)
  status                                        String?                 @db.VarChar(255)
  level                                         String?                 @db.VarChar(255)
  other_partnerships                            String?                 @db.VarChar(255)
  expected_sales                                String?                 @db.VarChar(255)
  contact_name                                  String?                 @db.VarChar(255)
  business_website                              String?                 @db.VarChar(255)
  business_phone                                String?                 @db.VarChar(255)
  contact_phone                                 String?                 @db.VarChar(255)
  reference                                     String?                 @db.VarChar(255)
  createdAt                                     DateTime                @db.DateTime(0)
  updatedAt                                     DateTime                @db.DateTime(0)
  deletedAt                                     DateTime?               @db.DateTime(0)
  clabe                                         String?                 @db.VarChar(255)
  bank_name                                     String?                 @db.VarChar(255)
  business_country                              String?                 @db.VarChar(255)
  business_type                                 String?                 @db.VarChar(255)
  contract_acknowledge                          String?                 @db.VarChar(255)
  last_dispersal                                DateTime?               @db.DateTime(0)
  Active_Account                                Active_Account[]
  BPayment_Credential                           BPayment_Credential[]
  Invoice                                       Invoice[]
  Service                                       Service?                @relation(fields: [service_id], references: [service_id], onDelete: NoAction, map: "Partner_ibfk_1")
  Partner_Certification                         Partner_Certification[]
  Partner_Earning                               Partner_Earning[]
  Partner_Package                               Partner_Package[]
  Partner_Plan_Partner_Plan_partner_idToPartner Partner_Plan[]          @relation("Partner_Plan_partner_idToPartner")
  Partner_Plan_Partner_Plan_plan_idToPartner    Partner_Plan?           @relation("Partner_Plan_plan_idToPartner")

  @@index([service_id], map: "service_id")
}

model Partner_Certification {
  partner_certification_id Int            @id @default(autoincrement())
  partner_id               Int?
  certification_id         Int?
  attempts                 Int?
  last_attempt_date        DateTime?      @db.DateTime(0)
  certification_date       DateTime?      @db.DateTime(0)
  status                   String?        @db.VarChar(255)
  score                    Float?         @db.Float
  createdAt                DateTime       @db.DateTime(0)
  updatedAt                DateTime       @db.DateTime(0)
  deletedAt                DateTime?      @db.DateTime(0)
  Partner                  Partner?       @relation(fields: [partner_id], references: [partner_id], onDelete: Cascade, map: "Partner_Certification_ibfk_1")
  Certification            Certification? @relation(fields: [certification_id], references: [certification_id], onDelete: Cascade, map: "Partner_Certification_ibfk_2")

  @@unique([partner_id, certification_id], map: "Partner_Certification_partner_id_certification_id_unique")
  @@index([certification_id], map: "certification_id")
}

model Partner_Earning {
  partner_earning_id  Int       @id @default(autoincrement())
  organizations       String?   @db.VarChar(255)
  total_organizations Int?
  accounts            String?   @db.VarChar(255)
  total_accounts      Int?
  level               Int?
  earning             Float?    @db.Float
  partner_id          Int?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  Partner             Partner?  @relation(fields: [partner_id], references: [partner_id], onDelete: Cascade, map: "Partner_Earning_ibfk_1")

  @@index([partner_id], map: "partner_id")
}

model Partner_Package {
  partner_package_id Int       @id @default(autoincrement())
  partner_id         Int?
  package_id         Int?      @unique(map: "Partner_Package_package_id_package_id_unique")
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  Partner            Partner?  @relation(fields: [partner_id], references: [partner_id], onDelete: NoAction, map: "Partner_Package_ibfk_1")
  Package            Package?  @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "Partner_Package_ibfk_2")

  @@index([partner_id], map: "partner_id")
}

model Partner_Plan {
  partner_plan_id                          Int       @id @default(autoincrement())
  partner_id                               Int?
  plan_id                                  Int?      @unique(map: "Partner_Plan_plan_id_plan_id_unique")
  createdAt                                DateTime  @db.DateTime(0)
  updatedAt                                DateTime  @db.DateTime(0)
  deletedAt                                DateTime? @db.DateTime(0)
  Partner_Partner_Plan_partner_idToPartner Partner?  @relation("Partner_Plan_partner_idToPartner", fields: [partner_id], references: [partner_id], onDelete: NoAction, map: "Partner_Plan_ibfk_1")
  Partner_Partner_Plan_plan_idToPartner    Partner?  @relation("Partner_Plan_plan_idToPartner", fields: [plan_id], references: [partner_id], onDelete: Cascade, map: "Partner_Plan_ibfk_2")

  @@index([partner_id], map: "partner_id")
}

model Payload_Storage {
  payload_storage_id String    @id @db.VarChar(255)
  value              String?   @db.Text
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
}

model Payment {
  payment_id      Int             @id @default(autoincrement())
  sent_payment_id Int?
  reference       String?         @db.Text
  response        String?         @db.VarChar(255)
  foliocpagos     String?         @db.VarChar(255)
  auth            String?         @db.VarChar(255)
  cd_response     String?         @db.VarChar(255)
  nb_error        String?         @db.Text
  cd_error        String?         @db.Text
  nb_company      String?         @db.VarChar(255)
  nb_merchant     String?         @db.VarChar(255)
  cc_type         String?         @db.VarChar(255)
  tp_operation    String?         @db.VarChar(255)
  cc_name         String?         @db.VarChar(255)
  cc_number       String?         @db.VarChar(255)
  amount          String?         @db.VarChar(255)
  createdAt       DateTime        @db.DateTime(0)
  updatedAt       DateTime        @db.DateTime(0)
  deletedAt       DateTime?       @db.DateTime(0)
  template_id     Int?
  user_id         Int?
  account_id      Int?
  Template        Template?       @relation(fields: [template_id], references: [template_id], map: "Payment_ibfk_1")
  Messenger_User  Messenger_User? @relation(fields: [user_id], references: [user_id], map: "Payment_ibfk_2")

  @@index([template_id], map: "template_id")
  @@index([user_id], map: "user_id")
}

model Paypal {
  paypal_id  Int       @id @default(autoincrement())
  account_id Int?
  name       String?   @db.VarChar(255)
  client_id  String?   @db.VarChar(255)
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  sandbox_id String?   @db.VarChar(255)
  is_sandbox Boolean?
  Account    Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Paypal_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Payu {
  payu_id         Int       @id @default(autoincrement())
  account_id      Int?
  payu_merchant   String?   @db.VarChar(255)
  payu_account    String?   @db.VarChar(255)
  api_key         String?   @db.VarChar(255)
  country         String?   @db.VarChar(255)
  is_test         Boolean?
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  custom_checkout Boolean?
  api_login       String?   @db.VarChar(255)
  Account         Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Payu_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Permission {
  permission_id    Int                @id @default(autoincrement())
  name             String?            @db.VarChar(255)
  description      String?            @db.VarChar(255)
  resource         String             @db.VarChar(255)
  create           Boolean?           @default(false)
  read             Boolean?           @default(false)
  update           Boolean?           @default(false)
  delete           Boolean?           @default(false)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  enabled          Boolean?           @default(true)
  Admin_Permission Admin_Permission[]
  Role_Permission  Role_Permission[]
}

model Pickup_Location {
  pickup_location_id        Int             @id @default(autoincrement())
  account_id                Int?
  name                      String?         @db.VarChar(255)
  full_address              String?         @db.Text
  description               String?         @db.VarChar(255)
  latitude                  String?         @db.VarChar(255)
  longitude                 String?         @db.VarChar(255)
  disponibility_description String?         @db.VarChar(255)
  map_image                 String?         @db.VarChar(255)
  createdAt                 DateTime        @db.DateTime(0)
  updatedAt                 DateTime        @db.DateTime(0)
  deletedAt                 DateTime?       @db.DateTime(0)
  brn                       String?         @db.VarChar(255)
  cell_phone                String?         @db.VarChar(255)
  home_phone                String?         @db.VarChar(255)
  email                     String?         @db.VarChar(255)
  street                    String?         @db.VarChar(255)
  city                      String?         @db.VarChar(255)
  state                     String?         @db.VarChar(255)
  zip                       String?         @db.VarChar(255)
  enable                    Boolean?
  street_number             String?         @db.VarChar(255)
  kanguro_origin_uuid       String?         @db.VarChar(255)
  colony                    String?         @db.VarChar(255)
  reference                 String?         @db.VarChar(255)
  web_paycredential_id      Int?
  stripe_id                 Int?
  paypal_id                 String?         @db.VarChar(255)
  mit_credential_id         Int?
  support_hours_delivery    String?         @db.VarChar(255)
  support_hours_pickup      String?         @db.VarChar(255)
  time_creation_delivery    String?         @db.VarChar(255)
  max_time_pickup           String?         @db.VarChar(255)
  eta_delivery              String?         @db.VarChar(255)
  delivery_enable           Boolean?        @default(true)
  external_id               String?         @db.VarChar(255)
  pickup_enable             Boolean?        @default(true)
  derivated_location        Int?
  support_hours_enabled     Boolean?        @default(false)
  delivery_hours_enabled    Boolean?        @default(false)
  pickup_hours_enabled      Boolean?        @default(false)
  support_hours             String?         @db.VarChar(255)
  delivery_hours            String?         @db.VarChar(255)
  pickup_hours              String?         @db.VarChar(255)
  Generic_Order             Generic_Order[]
  Account                   Account?        @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Pickup_Location_ibfk_1")
  Product_Stock             Product_Stock[]
  Variant_Stock             Variant_Stock[]

  @@index([account_id], map: "account_id")
}

model Plan {
  plan_id              Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(255)
  price                Int?
  enabled              Boolean?
  max_users            Int?
  cost_per_user        Int?
  plan_group_id        Int?
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  active_days          Int?
  is_free_trial        Boolean?
  features             String?                @db.VarChar(255)
  description          String?                @db.VarChar(255)
  is_offer             Boolean?
  Billing              Billing[]
  Plan_Group           Plan_Group?            @relation(fields: [plan_group_id], references: [plan_group_id], onDelete: NoAction, map: "Plan_ibfk_1")
  Request_Plan_Payment Request_Plan_Payment[]
  Usage                Usage[]

  @@index([plan_group_id], map: "plan_group_id")
}

model Plan_Group {
  plan_group_id Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  description   String?   @db.VarChar(255)
  service_id    Int?
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  Plan          Plan[]
  Service       Service?  @relation(fields: [service_id], references: [service_id], onDelete: NoAction, map: "Plan_Group_ibfk_1")

  @@index([service_id], map: "service_id")
}

model Plan_Payment {
  plan_payment_id         Int                   @id @default(autoincrement())
  reference               String?               @db.VarChar(255)
  response                String?               @db.VarChar(255)
  foliocpagos             String?               @db.VarChar(255)
  auth                    String?               @db.VarChar(255)
  cd_response             String?               @db.VarChar(255)
  nb_error                String?               @db.Text
  cd_error                String?               @db.Text
  nb_company              String?               @db.VarChar(255)
  nb_merchant             String?               @db.VarChar(255)
  cc_type                 String?               @db.VarChar(255)
  tp_operation            String?               @db.VarChar(255)
  cc_name                 String?               @db.VarChar(255)
  cc_number               String?               @db.VarChar(255)
  amount                  String?               @db.VarChar(255)
  request_plan_payment_id Int?
  card_id                 Int?
  createdAt               DateTime              @db.DateTime(0)
  updatedAt               DateTime              @db.DateTime(0)
  deletedAt               DateTime?             @db.DateTime(0)
  Billing                 Billing[]
  Request_Plan_Payment    Request_Plan_Payment? @relation(fields: [request_plan_payment_id], references: [request_plan_payment_id], onDelete: Cascade, map: "Plan_Payment_ibfk_1")
  Card                    Card?                 @relation(fields: [card_id], references: [card_id], onDelete: Cascade, map: "Plan_Payment_ibfk_2")

  @@index([card_id], map: "card_id")
  @@index([request_plan_payment_id], map: "request_plan_payment_id")
}

model Plan_Payment_Record {
  plan_payment_record_id    Int                   @id @default(autoincrement())
  name                      String?               @db.VarChar(255)
  url                       String?               @db.VarChar(255)
  processed                 Boolean?
  response_id               Int?
  createdAt                 DateTime              @db.DateTime(0)
  updatedAt                 DateTime              @db.DateTime(0)
  deletedAt                 DateTime?             @db.DateTime(0)
  Plan_Payment_Record       Plan_Payment_Record?  @relation("Plan_Payment_RecordToPlan_Payment_Record", fields: [response_id], references: [plan_payment_record_id], onDelete: NoAction, map: "Plan_Payment_Record_ibfk_1")
  other_Plan_Payment_Record Plan_Payment_Record[] @relation("Plan_Payment_RecordToPlan_Payment_Record")

  @@index([response_id], map: "response_id")
}

model Platform {
  platform_id       Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  description       String?             @db.VarChar(255)
  version           String?             @db.VarChar(255)
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  type              String?             @db.VarChar(255)
  title             String?             @db.VarChar(150)
  icon              String?             @db.VarChar(150)
  Platform_Account  Platform_Account[]
  Platform_Template Platform_Template[]
}

model Platform_Account {
  platform_account_id Int       @id @default(autoincrement())
  platform_id         Int?
  account_id          Int?
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  responding_mode     String?   @default("auto") @db.VarChar(150)
  confidence          Float?    @default(0.85) @db.Float
  enabled             Boolean?  @default(true)
  Platform            Platform? @relation(fields: [platform_id], references: [platform_id], onDelete: Cascade, map: "Platform_Account_ibfk_1")
  Account             Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Platform_Account_ibfk_2")

  @@unique([platform_id, account_id], map: "Platform_Account_platform_id_account_id_unique")
  @@index([account_id], map: "account_id")
}

model Platform_Template {
  platform_template_id Int       @id @default(autoincrement())
  platform_id          Int?
  template_id          Int?
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  Platform             Platform? @relation(fields: [platform_id], references: [platform_id], onDelete: Cascade, map: "Platform_Template_ibfk_1")
  Template             Template? @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "Platform_Template_ibfk_2")

  @@unique([platform_id, template_id], map: "Platform_Template_template_id_platform_id_unique")
  @@index([template_id], map: "template_id")
}

model Plugin {
  plugin_id           Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(255)
  description         String?               @db.VarChar(255)
  version             String?               @db.VarChar(255)
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  icon                String?               @db.VarChar(255)
  menu_name           String?               @db.VarChar(255)
  type                String?               @db.VarChar(255)
  show_on_sidebar     Boolean?
  resource_name       String?               @db.VarChar(255)
  number              Int?
  parent              String?               @db.VarChar(255)
  Plugin_Attribute    Plugin_Attribute[]
  Plugin_Organization Plugin_Organization[]
  Plugin_Subscription Plugin_Subscription[]
}

model Plugin_Attribute {
  plugin_attribute_id                                                                 Int                      @id @default(autoincrement())
  plugin_id                                                                           Int?
  name                                                                                String?                  @db.VarChar(255)
  type                                                                                String?                  @db.VarChar(255)
  default_value                                                                       String?                  @db.VarChar(255)
  frontend_type                                                                       String?                  @db.VarChar(255)
  description                                                                         String?                  @db.VarChar(255)
  title                                                                               String?                  @db.VarChar(255)
  brn                                                                                 String?                  @db.VarChar(255)
  createdAt                                                                           DateTime                 @db.DateTime(0)
  updatedAt                                                                           DateTime                 @db.DateTime(0)
  deletedAt                                                                           DateTime?                @db.DateTime(0)
  data                                                                                String?                  @db.Text
  Plugin                                                                              Plugin?                  @relation(fields: [plugin_id], references: [plugin_id], onDelete: Cascade, map: "Plugin_Attribute_ibfk_1")
  Plugin_Attribute_Value_Plugin_Attribute_Value_plugin_attribute_idToPlugin_Attribute Plugin_Attribute_Value[] @relation("Plugin_Attribute_Value_plugin_attribute_idToPlugin_Attribute")
  Plugin_Attribute_Value_Plugin_Attribute_Value_plugin_idToPlugin_Attribute           Plugin_Attribute_Value[] @relation("Plugin_Attribute_Value_plugin_idToPlugin_Attribute")

  @@index([plugin_id], map: "plugin_id")
}

model Plugin_Attribute_Value {
  plugin_attribute_value_id                                                     Int               @id @default(autoincrement())
  plugin_attribute_id                                                           Int?
  account_id                                                                    Int?
  value                                                                         String?           @db.Text
  brn                                                                           String?           @db.VarChar(255)
  createdAt                                                                     DateTime          @db.DateTime(0)
  updatedAt                                                                     DateTime          @db.DateTime(0)
  deletedAt                                                                     DateTime?         @db.DateTime(0)
  plugin_id                                                                     Int?
  Plugin_Attribute_Plugin_Attribute_Value_plugin_attribute_idToPlugin_Attribute Plugin_Attribute? @relation("Plugin_Attribute_Value_plugin_attribute_idToPlugin_Attribute", fields: [plugin_attribute_id], references: [plugin_attribute_id], onDelete: Cascade, map: "Plugin_Attribute_Value_ibfk_1")
  Account                                                                       Account?          @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Plugin_Attribute_Value_ibfk_2")
  Plugin_Attribute_Plugin_Attribute_Value_plugin_idToPlugin_Attribute           Plugin_Attribute? @relation("Plugin_Attribute_Value_plugin_idToPlugin_Attribute", fields: [plugin_id], references: [plugin_attribute_id], onDelete: Cascade, map: "Plugin_Attribute_Value_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([plugin_attribute_id], map: "plugin_attribute_id")
  @@index([plugin_id], map: "plugin_id")
}

model Plugin_Organization {
  plugin_organization_id Int           @id @default(autoincrement())
  plugin_id              Int?
  organization_id        Int?
  createdAt              DateTime      @db.DateTime(0)
  updatedAt              DateTime      @db.DateTime(0)
  deletedAt              DateTime?     @db.DateTime(0)
  Plugin                 Plugin?       @relation(fields: [plugin_id], references: [plugin_id], onDelete: Cascade, map: "Plugin_Organization_ibfk_1")
  Organization           Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: Cascade, map: "Plugin_Organization_ibfk_2")

  @@unique([plugin_id, organization_id], map: "Plugin_Organization_plugin_id_organization_id_unique")
  @@index([organization_id], map: "organization_id")
}

model Plugin_Subscription {
  plugin_subscription_id Int           @id @default(autoincrement())
  plugin_id              Int?
  subscription_id        Int?
  createdAt              DateTime      @db.DateTime(0)
  updatedAt              DateTime      @db.DateTime(0)
  deletedAt              DateTime?     @db.DateTime(0)
  Plugin                 Plugin?       @relation(fields: [plugin_id], references: [plugin_id], onDelete: Cascade, map: "Plugin_Subscription_ibfk_1")
  Subscription           Subscription? @relation(fields: [subscription_id], references: [subscription_id], onDelete: Cascade, map: "Plugin_Subscription_ibfk_2")

  @@unique([plugin_id, subscription_id], map: "Plugin_Subscription_subscription_id_plugin_id_unique")
  @@index([subscription_id], map: "subscription_id")
}

model Point {
  point_id  Int       @id @default(autoincrement())
  latitude  String?   @db.VarChar(255)
  longitude String?   @db.VarChar(255)
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  shape_id  Int?
  Shape     Shape?    @relation(fields: [shape_id], references: [shape_id], onDelete: Cascade, map: "Point_ibfk_1")

  @@index([shape_id], map: "shape_id")
}

model Post {
  post_id          Int                @id @default(autoincrement())
  account_id       Int?
  platform         String?            @db.VarChar(255)
  text             String?            @db.MediumText
  status           String?            @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  external_post_id String?            @db.VarChar(255)
  publish_time     DateTime?          @db.DateTime(0)
  Answer           Answer[]
  Account          Account?           @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Post_ibfk_1")
  Post_Image       Post_Image[]
  Post_Interaction Post_Interaction[]
  Topic_Post       Topic_Post[]

  @@index([account_id], map: "account_id")
}

model Post_Image {
  post_image_id Int       @id @default(autoincrement())
  post_id       Int?
  image         String?   @db.MediumText
  media_id      String?   @db.VarChar(255)
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  Post          Post?     @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "Post_Image_ibfk_1")

  @@index([post_id], map: "post_id")
}

model Post_Interaction {
  post_interaction_id     Int       @id @default(autoincrement())
  external_interaction_id String?   @db.VarChar(255)
  post_id                 Int?
  platform                String?   @db.VarChar(255)
  text                    String?   @db.Text
  image                   String?   @db.Text
  sentiment               Float?    @db.Float
  sentiment_label         String?   @db.VarChar(255)
  sender_id               String?   @db.VarChar(255)
  sender_name             String?   @db.VarChar(255)
  reaction_type           String?   @db.Text
  createdAt               DateTime  @db.DateTime(0)
  updatedAt               DateTime  @db.DateTime(0)
  deletedAt               DateTime? @db.DateTime(0)
  Post                    Post?     @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "Post_Interaction_ibfk_1")

  @@index([post_id], map: "post_id")
}

model Praga {
  praga_id          Int       @id
  account_id        Int?
  merchant_id       String?   @db.Char(36)
  user_code         String?   @db.VarChar(255)
  api_token         String?   @db.VarChar(255)
  payment_types     String?   @db.VarChar(255)
  cipher_key        String?   @db.VarChar(255)
  product_id        String?   @db.VarChar(255)
  user_id           Int?
  max_discount_rate Float?    @db.Float
  charge_for_tx     Float?    @db.Float
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  partner_id        Int?
  is_default        Boolean?
  username          String?   @db.VarChar(255)
  Account           Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Praga_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Process {
  process_id          Int                   @id @default(autoincrement())
  account_id          Int?
  platform            String?               @db.VarChar(255)
  user_id             Int?
  starter_time        DateTime?             @db.DateTime(0)
  end_time            DateTime?             @db.DateTime(0)
  createdAt           DateTime              @db.DateTime(0)
  updatedAt           DateTime              @db.DateTime(0)
  deletedAt           DateTime?             @db.DateTime(0)
  Account             Account?              @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Process_ibfk_1")
  Messenger_User      Messenger_User?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Process_ibfk_2")
  Process_Information Process_Information[]

  @@index([account_id], map: "account_id")
  @@index([user_id], map: "user_id")
}

model Process_Information {
  process_information_id Int             @id @default(autoincrement())
  process_id             Int?
  user_attribute_id      Int?
  value                  String?         @db.Text
  createdAt              DateTime        @db.DateTime(0)
  updatedAt              DateTime        @db.DateTime(0)
  deletedAt              DateTime?       @db.DateTime(0)
  Process                Process?        @relation(fields: [process_id], references: [process_id], onDelete: Cascade, map: "Process_Information_ibfk_1")
  User_Attribute         User_Attribute? @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Process_Information_ibfk_2")

  @@index([process_id], map: "process_id")
  @@index([user_attribute_id], map: "user_attribute_id")
}

model Product {
  product_id             Int                     @id @default(autoincrement())
  account_id             Int?
  name                   String?                 @db.VarChar(255)
  sku                    String?                 @db.VarChar(255)
  image                  String?                 @db.VarChar(255)
  description            String?                 @db.MediumText
  stock                  Int?
  price                  Float?                  @db.Float
  sold                   Int?
  priority               Int?
  enabled                Boolean?
  createdAt              DateTime                @db.DateTime(0)
  updatedAt              DateTime                @db.DateTime(0)
  deletedAt              DateTime?               @db.DateTime(0)
  external_id            String?                 @db.VarChar(150)
  keywords               String?                 @db.Text
  brn                    String?                 @db.VarChar(255)
  clave_sat              String?                 @db.VarChar(255)
  clave_unidad_sat       String?                 @db.VarChar(255)
  length                 Float?                  @db.Float
  weight                 Float?                  @db.Float
  width                  Float?                  @db.Float
  height                 Float?                  @db.Float
  hide                   Boolean?
  external_platform      String?                 @db.VarChar(255)
  fb_catalog_id          String?                 @default("0") @db.VarChar(255)
  fb_product_retailer_id String?                 @db.VarChar(255)
  Category_Product       Category_Product[]
  Image                  Image[]
  Item                   Item[]
  Account                Account?                @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Product_ibfk_1")
  Product_Stock          Product_Stock[]
  Product_Variant_Value  Product_Variant_Value[]
  Variant                Variant[]

  @@index([account_id], map: "account_id")
}

model Product_Stock {
  product_stock_id   Int              @id @default(autoincrement())
  product_id         Int?
  pickup_location_id Int?
  stock              Int?
  price              Float?           @db.Float
  enabled            Boolean?         @default(true)
  createdAt          DateTime         @db.DateTime(0)
  updatedAt          DateTime         @db.DateTime(0)
  deletedAt          DateTime?        @db.DateTime(0)
  Product            Product?         @relation(fields: [product_id], references: [product_id], onDelete: Restrict, onUpdate: Restrict, map: "Product_Stock_ibfk_1")
  Pickup_Location    Pickup_Location? @relation(fields: [pickup_location_id], references: [pickup_location_id], onDelete: Restrict, onUpdate: Restrict, map: "Product_Stock_ibfk_2")

  @@index([pickup_location_id], map: "pickup_location_id")
  @@index([product_id], map: "product_id")
}

model Product_Variant {
  product_variant_id Int             @id @default(autoincrement())
  product_id         Int?
  value              String?         @db.VarChar(255)
  description        String?         @db.Text
  stock              Int?
  price              Float?          @db.Float
  enabled            Boolean?        @default(true)
  createdAt          DateTime        @db.DateTime(0)
  updatedAt          DateTime        @db.DateTime(0)
  deletedAt          DateTime?       @db.DateTime(0)
  external_platform  String?         @db.VarChar(255)
  external_id        String?         @db.VarChar(255)
  sku                String?         @db.VarChar(255)
  Var_Opt            Var_Opt[]
  Variant_Stock      Variant_Stock[]

  @@index([product_id], map: "product_variant_id")
}

model Product_Variant_Value {
  product_variant_value_id Int       @id @default(autoincrement())
  product_id               Int?
  value                    String?   @db.VarChar(255)
  description              String?   @db.Text
  stock                    Int?
  price                    Float?    @db.Float
  enabled                  Boolean?  @default(true)
  external_id              String?   @db.VarChar(255)
  external_platform        String?   @db.VarChar(255)
  sku                      String?   @db.VarChar(255)
  createdAt                DateTime  @db.DateTime(0)
  updatedAt                DateTime  @db.DateTime(0)
  deletedAt                DateTime? @db.DateTime(0)
  Product                  Product?  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "Product_Variant_Value_ibfk_1")

  @@index([product_id], map: "product_id")
}

model Public_Media {
  public_media_id    Int            @id @default(autoincrement())
  account_id         Int?
  platform           String?        @db.VarChar(255)
  text               String?        @db.Text
  external_id        String?        @db.VarChar(255)
  publish_time       DateTime?      @db.DateTime(0)
  media_url          String?        @db.VarChar(255)
  reply_to           Int?
  is_comment         Boolean?
  enable_comments    Boolean?
  owner              String?        @db.VarChar(255)
  createdAt          DateTime       @db.DateTime(0)
  updatedAt          DateTime       @db.DateTime(0)
  deletedAt          DateTime?      @db.DateTime(0)
  sentiment          String?        @db.VarChar(255)
  is_published       Boolean?
  scheduled_for      DateTime?      @db.DateTime(0)
  platform_model_id  Int?
  status             String?        @db.VarChar(255)
  Account            Account?       @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Public_Media_ibfk_1")
  Public_Media       Public_Media?  @relation("Public_MediaToPublic_Media", fields: [reply_to], references: [public_media_id], onDelete: Cascade, map: "Public_Media_ibfk_2")
  other_Public_Media Public_Media[] @relation("Public_MediaToPublic_Media")

  @@index([account_id], map: "account_id")
  @@index([reply_to], map: "reply_to")
}

model Pure_Social {
  pure_social_id Int       @id @default(autoincrement())
  account_id     Int?
  subscribed     Boolean?
  token          String?   @db.VarChar(255)
  name           String?   @db.VarChar(255)
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime  @db.DateTime(0)
  deletedAt      DateTime? @db.DateTime(0)
  channel        String?   @db.VarChar(255)
  queue          String?   @db.VarChar(255)
  page_id        String?   @db.VarChar(255)
  org_id         String?   @db.VarChar(255)
  Account        Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Pure_Social_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Question {
  question_id       Int               @id @default(autoincrement())
  correct_answer_id Int?
  value             String?           @db.VarChar(255)
  image             String?           @db.VarChar(255)
  description       String?           @db.Text
  points            Float?            @db.Float
  difficulty        Int?
  createdAt         DateTime          @db.DateTime(0)
  updatedAt         DateTime          @db.DateTime(0)
  deletedAt         DateTime?         @db.DateTime(0)
  Exam_Question     Exam_Question[]
  Question_Answer   Question_Answer[]
  Question_Topic    Question_Topic[]
}

model Question_Answer {
  question_answer_id Int       @id @default(autoincrement())
  question_id        Int?
  value              String?   @db.VarChar(255)
  image              String?   @db.VarChar(255)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  Question           Question? @relation(fields: [question_id], references: [question_id], onDelete: Cascade, map: "Question_Answer_ibfk_1")

  @@index([question_id], map: "question_id")
}

model Question_Topic {
  q_t_id              Int                  @id @default(autoincrement())
  question_id         Int?
  c_t_id              Int?
  createdAt           DateTime             @db.DateTime(0)
  updatedAt           DateTime             @db.DateTime(0)
  deletedAt           DateTime?            @db.DateTime(0)
  Question            Question?            @relation(fields: [question_id], references: [question_id], onDelete: Cascade, map: "Question_Topic_ibfk_1")
  Certification_Topic Certification_Topic? @relation(fields: [c_t_id], references: [c_t_id], onDelete: Cascade, map: "Question_Topic_ibfk_2")

  @@unique([question_id, c_t_id], map: "Question_Topic_question_id_c_t_id_unique")
  @@index([c_t_id], map: "c_t_id")
}

model Queue {
  queue_id      Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  type          String?         @db.VarChar(255)
  createdAt     DateTime        @db.DateTime(0)
  updatedAt     DateTime        @db.DateTime(0)
  deletedAt     DateTime?       @db.DateTime(0)
  Queue_Account Queue_Account[]
}

model Queue_Account {
  queue_account_id Int       @id @default(autoincrement())
  queue_id         Int?
  account_id       Int?      @unique(map: "Queue_Account_account_id_account_id_unique")
  url              String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  Queue            Queue?    @relation(fields: [queue_id], references: [queue_id], onDelete: NoAction, map: "Queue_Account_ibfk_1")
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Queue_Account_ibfk_2")

  @@index([queue_id], map: "queue_id")
}

model Rate {
  rate_id           Int              @id @default(autoincrement())
  account_id        Int?
  name              String?          @db.VarChar(255)
  register_block_id Int?
  event_block_id    Int?
  is_active         Boolean?
  number            Int?
  group_name        String?          @db.VarChar(255)
  brn               String?          @db.VarChar(255)
  createdAt         DateTime         @db.DateTime(0)
  updatedAt         DateTime         @db.DateTime(0)
  deletedAt         DateTime?        @db.DateTime(0)
  Account           Account?         @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Rate_ibfk_1")
  Rate_Parameter    Rate_Parameter[]

  @@index([account_id], map: "account_id")
}

model Rate_Parameter {
  rate_parameter_id Int             @id @default(autoincrement())
  rate_id           Int?
  user_attribute_id Int?
  name              String?         @db.VarChar(255)
  brn               String?         @db.VarChar(255)
  createdAt         DateTime        @db.DateTime(0)
  updatedAt         DateTime        @db.DateTime(0)
  deletedAt         DateTime?       @db.DateTime(0)
  Rate              Rate?           @relation(fields: [rate_id], references: [rate_id], onDelete: Cascade, map: "Rate_Parameter_ibfk_1")
  User_Attribute    User_Attribute? @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: NoAction, map: "Rate_Parameter_ibfk_2")

  @@index([rate_id], map: "rate_id")
  @@index([user_attribute_id], map: "user_attribute_id")
}

model Reference {
  reference_id     Int                @id @default(autoincrement())
  account_id       Int?
  text             String?            @db.VarChar(255)
  brn              String?            @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  platform         String?            @default("messenger") @db.VarChar(255)
  Account          Account?           @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Reference_ibfk_1")
  Reference_Action Reference_Action[]

  @@index([account_id], map: "account_id")
}

model Reference_Action {
  reference_action_id Int        @id @default(autoincrement())
  type                String?    @db.VarChar(255)
  value               String?    @db.VarChar(255)
  external_id         Int?
  reference_id        Int?
  brn                 String?    @db.VarChar(255)
  createdAt           DateTime   @db.DateTime(0)
  updatedAt           DateTime   @db.DateTime(0)
  deletedAt           DateTime?  @db.DateTime(0)
  Reference           Reference? @relation(fields: [reference_id], references: [reference_id], onDelete: Cascade, map: "Reference_Action_ibfk_1")

  @@index([reference_id], map: "reference_id")
}

model Reminder {
  reminder_id  Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  description  String?   @db.VarChar(255)
  next_date    DateTime? @db.DateTime(0)
  repeat       Boolean?
  enabled      Boolean?
  executed     Boolean?
  user_id      Int?
  last_execute DateTime? @db.DateTime(0)
  account_id   Int?
  action       String?   @db.VarChar(255)
  payload      String?   @db.VarChar(255)
  minutes      String?   @db.VarChar(255)
  hours        String?   @db.VarChar(255)
  days         String?   @db.VarChar(255)
  weeks        String?   @db.VarChar(255)
  months       String?   @db.VarChar(255)
  years        String?   @db.VarChar(255)
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  week_days    String?   @db.VarChar(255)
  Account      Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Reminder_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Report {
  report_id  Int       @id @default(autoincrement())
  account_id Int?
  url        String?   @db.Text
  is_new     Boolean?
  type       String?   @db.VarChar(255)
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  name       String?   @db.VarChar(150)
  platform   String?   @db.VarChar(255)
  Account    Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Report_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Request_Log {
  request_log_id Int       @id @default(autoincrement())
  method         String?   @db.VarChar(255)
  code           Int?
  message        String?   @db.VarChar(255)
  endpoint       String?   @db.VarChar(255)
  url            String?   @db.VarChar(255)
  body           String?   @db.MediumText
  params         String?   @db.VarChar(255)
  query          String?   @db.MediumText
  headers        String?   @db.MediumText
  response       String?   @db.LongText
  ip             String?   @db.VarChar(255)
  admin_id       Int?
  createdAt      DateTime  @db.DateTime(0)
  updatedAt      DateTime  @db.DateTime(0)
  deletedAt      DateTime? @db.DateTime(0)
  Admin          Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: NoAction, map: "Request_Log_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model Request_Plan_Payment {
  request_plan_payment_id Int            @id @default(autoincrement())
  reference               String?        @db.VarChar(255)
  cadena_pago             String?        @db.VarChar(255)
  billed_months           Int?
  account_id              Int?
  plan_id                 Int?
  createdAt               DateTime       @db.DateTime(0)
  updatedAt               DateTime       @db.DateTime(0)
  deletedAt               DateTime?      @db.DateTime(0)
  admin_id                Int?
  auto_renew              Boolean?       @default(true)
  type                    Int?
  billed_days             Int?
  card_id                 Int?
  Plan_Payment            Plan_Payment[]
  Account                 Account?       @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Request_Plan_Payment_ibfk_1")
  Plan                    Plan?          @relation(fields: [plan_id], references: [plan_id], onDelete: NoAction, map: "Request_Plan_Payment_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([plan_id], map: "plan_id")
}

model Resource_Topic {
  r_t_id                    Int                     @id @default(autoincrement())
  certification_resource_id Int?
  c_t_id                    Int?
  createdAt                 DateTime                @db.DateTime(0)
  updatedAt                 DateTime                @db.DateTime(0)
  deletedAt                 DateTime?               @db.DateTime(0)
  Certification_Resource    Certification_Resource? @relation(fields: [certification_resource_id], references: [certification_resource_id], onDelete: Cascade, map: "Resource_Topic_ibfk_1")
  Certification_Topic       Certification_Topic?    @relation(fields: [c_t_id], references: [c_t_id], onDelete: Cascade, map: "Resource_Topic_ibfk_2")

  @@unique([certification_resource_id, c_t_id], map: "Resource_Topic_c_t_id_certification_resource_id_unique")
  @@index([c_t_id], map: "c_t_id")
}

model Response {
  response_id Int       @id @default(autoincrement())
  block_id    Int?
  user_id     Int?
  account_id  Int?
  message     String?   @db.VarChar(255)
  author      String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  platform    String?   @default("messenger") @db.VarChar(150)
  intent      String?   @db.VarChar(150)
  Block       Block?    @relation(fields: [block_id], references: [block_id], onDelete: NoAction, map: "Response_ibfk_1")
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Response_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([block_id], map: "block_id")
  @@index([user_id], map: "user_id")
}

model Response_Template {
  response_template_id    Int                       @id @default(autoincrement())
  account_id              Int?
  name                    String?                   @db.VarChar(255)
  description             String?                   @db.VarChar(255)
  category                String?                   @db.VarChar(255)
  text                    String?                   @db.VarChar(255)
  createdAt               DateTime                  @db.DateTime(0)
  updatedAt               DateTime                  @db.DateTime(0)
  deletedAt               DateTime?                 @db.DateTime(0)
  image                   String?                   @db.VarChar(255)
  file_type               String?                   @db.VarChar(255)
  file                    String?                   @db.VarChar(255)
  Account                 Account?                  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Response_Template_ibfk_1")
  Response_Template_Group Response_Template_Group[]

  @@index([account_id], map: "account_id")
}

model Response_Template_Group {
  response_template_group_id Int                @id @default(autoincrement())
  response_template_id       Int?
  group_id                   Int?
  createdAt                  DateTime           @db.DateTime(0)
  updatedAt                  DateTime           @db.DateTime(0)
  deletedAt                  DateTime?          @db.DateTime(0)
  Response_Template          Response_Template? @relation(fields: [response_template_id], references: [response_template_id], onDelete: Restrict, onUpdate: Restrict, map: "Response_Template_Group_ibfk_1")
  Group                      Group?             @relation(fields: [group_id], references: [group_id], onDelete: Restrict, onUpdate: Restrict, map: "Response_Template_Group_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([response_template_id], map: "response_template_id")
}

model Role {
  role_id         Int               @id @default(autoincrement())
  name            String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  type            String?           @db.VarChar(255)
  enabled         Boolean?          @default(true)
  createdAt       DateTime          @db.DateTime(0)
  updatedAt       DateTime          @db.DateTime(0)
  deletedAt       DateTime?         @db.DateTime(0)
  Milestone_Role  Milestone_Role[]
  Role_Permission Role_Permission[]
  Role_Service    Role_Service[]
}

model Role_Permission {
  role_permission_id Int         @id @default(autoincrement())
  role_id            Int?
  permission_id      Int?
  createdAt          DateTime    @db.DateTime(0)
  updatedAt          DateTime    @db.DateTime(0)
  deletedAt          DateTime?   @db.DateTime(0)
  Role               Role?       @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "Role_Permission_ibfk_1")
  Permission         Permission? @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade, map: "Role_Permission_ibfk_2")

  @@unique([role_id, permission_id], map: "Role_Permission_role_id_permission_id_unique")
  @@index([permission_id], map: "permission_id")
}

model Role_Service {
  role_service_id Int       @id @default(autoincrement())
  role_id         Int?
  service_id      Int?
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  Role            Role?     @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "Role_Service_ibfk_1")
  Service         Service?  @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "Role_Service_ibfk_2")

  @@unique([role_id, service_id], map: "Role_Service_service_id_role_id_unique")
  @@index([service_id], map: "service_id")
}

model Rule {
  rule_id     Int          @id @default(autoincrement())
  account_id  Int?
  name        String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  enabled     Boolean?     @default(true)
  createdAt   DateTime     @db.DateTime(0)
  updatedAt   DateTime     @db.DateTime(0)
  deletedAt   DateTime?    @db.DateTime(0)
  brn         String?      @db.VarChar(255)
  Account     Account?     @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Rule_ibfk_1")
  Rule_Param  Rule_Param[]

  @@index([account_id], map: "account_id")
}

model Rule_Param {
  rule_param_id Int       @id @default(autoincrement())
  rule_id       Int?
  type          String?   @db.VarChar(255)
  value         String?   @db.Text
  config        String?   @db.VarChar(150)
  enabled       Boolean?
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  brn           String?   @db.VarChar(255)
  Rule          Rule?     @relation(fields: [rule_id], references: [rule_id], onDelete: Cascade, map: "Rule_Param_ibfk_1")

  @@index([rule_id], map: "rule_id")
}

model Sandbox {
  sandbox_id Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  account_id Int?
  bmid       String?   @db.VarChar(255)
  token      String?   @db.VarChar(255)
  subscribed Boolean?
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  Account    Account?  @relation(fields: [account_id], references: [account_id], map: "Sandbox_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Sandbox_User {
  user_id               Int                 @id @default(autoincrement())
  ip                    String?             @db.VarChar(255)
  container             String?             @db.VarChar(255)
  first_name            String?             @db.VarChar(255)
  last_name             String?             @db.VarChar(255)
  gender                String?             @db.VarChar(255)
  profile_pic           String?             @db.VarChar(255)
  account_id            Int?
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?           @db.DateTime(0)
  sequence_step         Int?                @default(0)
  is_subscribed         Boolean?            @default(true)
  createdAt             DateTime            @db.DateTime(0)
  updatedAt             DateTime            @db.DateTime(0)
  deletedAt             DateTime?           @db.DateTime(0)
  last_info_update      DateTime?           @db.Date
  Account               Account?            @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Sandbox_User_ibfk_1")
  Sequence              Sequence?           @relation(fields: [sequence_id], references: [sequence_id], map: "Sandbox_User_ibfk_2")
  Sandbox_User_Case     Sandbox_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Sandbox_User_Case {
  sandbox_user_case_id Int           @id @default(autoincrement())
  user_id              Int?
  case_id              Int?
  createdAt            DateTime      @db.DateTime(0)
  updatedAt            DateTime      @db.DateTime(0)
  deletedAt            DateTime?     @db.DateTime(0)
  Sandbox_User         Sandbox_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Sandbox_User_Case_ibfk_1")
  Case                 Case?         @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Sandbox_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Sandbox_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Sendgrid {
  sendgrid_id Int       @id @default(autoincrement())
  account_id  Int?
  email       String?   @db.VarChar(255)
  api_key     String?   @db.VarChar(255)
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  name        String?   @db.VarChar(255)
  subscribed  Int?      @db.TinyInt
}

model Sent_Payment {
  sent_payment_id Int             @id @default(autoincrement())
  reference       String?         @db.Text
  cadena_pago     String?         @db.Text
  template_id     Int?
  pay_user        String?         @db.VarChar(255)
  user_id         Int?
  createdAt       DateTime        @db.DateTime(0)
  updatedAt       DateTime        @db.DateTime(0)
  deletedAt       DateTime?       @db.DateTime(0)
  platform        String?         @db.VarChar(150)
  account_id      Int?
  Template        Template?       @relation(fields: [template_id], references: [template_id], onDelete: NoAction, map: "Sent_Payment_ibfk_1")
  Messenger_User  Messenger_User? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Sent_Payment_ibfk_2")

  @@index([template_id], map: "template_id")
  @@index([user_id], map: "user_id")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model Sequence {
  sequence_id            Int                      @id @default(autoincrement())
  account_id             Int?
  enabled                Boolean?                 @default(true)
  name                   String?                  @db.VarChar(255)
  description            String?                  @db.VarChar(255)
  createdAt              DateTime                 @db.DateTime(0)
  updatedAt              DateTime                 @db.DateTime(0)
  deletedAt              DateTime?                @db.DateTime(0)
  copy_of                Int?
  brn                    String?                  @db.VarChar(255)
  for_cases              Boolean?                 @default(false)
  B2chat_User            B2chat_User[]
  Block                  Block[]
  Follow_Up_Action       Follow_Up_Action[]
  Guest_User             Guest_User[]
  H4Mail_User            H4Mail_User[]
  Messenger_User         Messenger_User[]
  Package_Sequence       Package_Sequence[]
  Sandbox_User           Sandbox_User[]
  Account                Account?                 @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Sequence_ibfk_1")
  Telegram_User          Telegram_User[]
  Test_User              Test_User[]
  TwitterDM_User         TwitterDM_User[]
  Twitter_User           Twitter_User[]
  User                   User[]
  Whatsapp_Infobip_User  Whatsapp_Infobip_User[]
  Whatsapp_Official_User Whatsapp_Official_User[]
  Whatsapp_Twilio_User   Whatsapp_Twilio_User[]
  Whatsapp_User          Whatsapp_User[]

  @@index([account_id], map: "account_id")
}

model Service {
  service_id        Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  title             String?             @db.VarChar(255)
  logo              String?             @db.VarChar(255)
  login_logo        String?             @db.VarChar(255)
  login_background  String?             @db.VarChar(255)
  domain            String?             @db.VarChar(255)
  createdAt         DateTime            @db.DateTime(0)
  updatedAt         DateTime            @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  toolbar           String?             @db.VarChar(150)
  color             String?             @db.VarChar(150)
  Milestone_Service Milestone_Service[]
  Partner           Partner[]
  Plan_Group        Plan_Group[]
  Role_Service      Role_Service[]
  Subscription      Subscription[]
}

model Shape {
  shape_id           Int       @id @default(autoincrement())
  name               String?   @db.VarChar(255)
  description        String?   @db.VarChar(255)
  color              String?   @db.VarChar(255)
  type               String?   @db.VarChar(255)
  radio              Float?    @default(0) @db.Float
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  account_id         Int?
  enable             Boolean?  @default(true)
  pickup_location_id Int?
  Point              Point[]
  Account            Account?  @relation(fields: [account_id], references: [account_id], map: "Shape_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Shipping {
  shipping_id               Int            @id @default(autoincrement())
  order_id                  Int?
  pickup_location_id        Int?
  total                     Float?         @db.Float
  destination_name          String?        @db.VarChar(255)
  destination_email         String?        @db.VarChar(255)
  destination_home_phone    String?        @db.VarChar(255)
  destination_street        String?        @db.VarChar(255)
  destination_street_number String?        @db.VarChar(255)
  destination_colony        String?        @db.VarChar(255)
  destination_city          String?        @db.VarChar(255)
  destination_state         String?        @db.VarChar(255)
  destination_zip           String?        @db.VarChar(255)
  destination_notes         String?        @db.VarChar(255)
  kanguro_uuid              String?        @db.VarChar(255)
  status                    String?        @db.VarChar(255)
  kanguro_order_id          String?        @db.VarChar(255)
  rate_id                   String?        @db.VarChar(255)
  error                     String?        @db.VarChar(255)
  is_free                   Boolean?
  details                   String?        @db.Text
  service                   String?        @db.VarChar(255)
  createdAt                 DateTime       @db.DateTime(0)
  updatedAt                 DateTime       @db.DateTime(0)
  deletedAt                 DateTime?      @db.DateTime(0)
  quote_id                  String?        @db.VarChar(255)
  tracking                  String?        @db.VarChar(255)
  label_url                 String?        @db.VarChar(255)
  Generic_Order             Generic_Order? @relation(fields: [order_id], references: [order_id], onDelete: Cascade, map: "Shipping_ibfk_1")

  @@index([order_id], map: "order_id")
}

model Shopify {
  shopify_id           Int       @id @default(autoincrement())
  account_id           Int?
  refresh_time         Int?
  shop_name            String?   @db.VarChar(255)
  access_token         String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  default_variant_name String?   @db.VarChar(255)
  Account              Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Shopify_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Sticker {
  sticker_id      Int       @id @default(autoincrement())
  account_id      Int?
  name            String?   @db.VarChar(255)
  url             String?   @db.VarChar(255)
  sentiment       String?   @db.VarChar(255)
  is_user_created Boolean?
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  Account         Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Sticker_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Stripe {
  stripe_id         Int       @id @default(autoincrement())
  account_id        Int?
  public_key        String?   @db.VarChar(255)
  secret            String?   @db.VarChar(255)
  success_url       String?   @db.VarChar(255)
  cancel_url        String?   @db.VarChar(255)
  currency          String?   @db.VarChar(255)
  createdAt         DateTime  @db.DateTime(0)
  updatedAt         DateTime  @db.DateTime(0)
  deletedAt         DateTime? @db.DateTime(0)
  stripe_account_id String?   @db.VarChar(255)
  Account           Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Stripe_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Subscription {
  subscription_id      Int                    @id @default(autoincrement())
  service_id           Int?
  name                 String?                @db.VarChar(255)
  description          String?                @db.VarChar(255)
  enabled              Boolean?
  max_accounts         Int?
  price                Float?                 @db.Float
  months               Int?
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  Organization_Billing Organization_Billing[]
  Plugin_Subscription  Plugin_Subscription[]
  Service              Service?               @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "Subscription_ibfk_1")

  @@index([service_id], map: "service_id")
}

model Subscription_Payment {
  subscription_payment_id Int           @id @default(autoincrement())
  amount                  String?       @db.VarChar(255)
  auth                    String?       @db.VarChar(255)
  cc_expmonth             String?       @db.VarChar(255)
  cc_expyear              String?       @db.VarChar(255)
  cc_name                 String?       @db.VarChar(255)
  cc_number               String?       @db.VarChar(255)
  cc_type                 String?       @db.VarChar(255)
  cd_error                String?       @db.VarChar(255)
  cd_response             String?       @db.VarChar(255)
  date                    String?       @db.VarChar(255)
  email                   String?       @db.VarChar(255)
  emv_key_date            String?       @db.VarChar(255)
  folio                   String?       @db.VarChar(255)
  foliocpagos             String?       @db.VarChar(255)
  id_url                  String?       @db.VarChar(255)
  is_tokenized            Boolean?
  nb_company              String?       @db.VarChar(255)
  nb_error                String?       @db.VarChar(255)
  nb_merchant             String?       @db.VarChar(255)
  organization_id         Int?
  payment_type            Int?
  reference               String?       @db.VarChar(255)
  response                String?       @db.VarChar(255)
  subscription_id         String?       @db.VarChar(255)
  time                    String?       @db.VarChar(255)
  tp_operation            String?       @db.VarChar(255)
  url                     String?       @db.VarChar(255)
  voucher                 String?       @db.VarChar(255)
  createdAt               DateTime      @db.DateTime(0)
  updatedAt               DateTime      @db.DateTime(0)
  deletedAt               DateTime?     @db.DateTime(0)
  Organization            Organization? @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, map: "Subscription_Payment_ibfk_1")

  @@index([organization_id], map: "organization_id")
}

model Tag {
  tag_id          Int           @id @default(autoincrement())
  name            String?       @db.VarChar(255)
  color           String?       @db.VarChar(255)
  tag_category_id Int?
  createdAt       DateTime      @db.DateTime(0)
  updatedAt       DateTime      @db.DateTime(0)
  deletedAt       DateTime?     @db.DateTime(0)
  account_id      Int?
  brn             String?       @db.VarChar(255)
  Case_Tag        Case_Tag[]
  Tag_Category    Tag_Category? @relation(fields: [tag_category_id], references: [tag_category_id], onDelete: Cascade, map: "Tag_ibfk_1")

  @@index([tag_category_id], map: "tag_category_id")
}

model Tag_Category {
  tag_category_id    Int                  @id @default(autoincrement())
  name               String?              @db.VarChar(255)
  image              String?              @db.VarChar(255)
  color              String?              @db.VarChar(255)
  createdAt          DateTime             @db.DateTime(0)
  updatedAt          DateTime             @db.DateTime(0)
  deletedAt          DateTime?            @db.DateTime(0)
  account_id         Int?
  Tag                Tag[]
  Tag_Category_Group Tag_Category_Group[]
}

model Tag_Category_Group {
  tag_category_group_id Int           @id @default(autoincrement())
  tag_category_id       Int?
  group_id              Int?
  createdAt             DateTime      @db.DateTime(0)
  updatedAt             DateTime      @db.DateTime(0)
  deletedAt             DateTime?     @db.DateTime(0)
  Tag_Category          Tag_Category? @relation(fields: [tag_category_id], references: [tag_category_id], onDelete: Restrict, onUpdate: Restrict, map: "Tag_Category_Group_ibfk_1")
  Group                 Group?        @relation(fields: [group_id], references: [group_id], onDelete: Restrict, onUpdate: Restrict, map: "Tag_Category_Group_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([tag_category_id], map: "tag_category_id")
}

model Telegram {
  telegram_id Int       @id @default(autoincrement())
  name        String?   @db.VarChar(255)
  account_id  Int?
  username    String?   @db.VarChar(255)
  token       String?   @db.VarChar(255)
  bot_id      String?   @db.VarChar(255)
  subscribed  Boolean?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  get_started Int?
  Account     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Telegram_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Telegram_User {
  user_id               Int       @id @default(autoincrement())
  first_name            String?   @db.VarChar(255)
  last_name             String?   @db.VarChar(255)
  language_code         String?   @db.VarChar(255)
  chat_id               String?   @db.VarChar(255)
  account_id            Int?
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime? @db.DateTime(0)
  sequence_step         Int?      @default(0)
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  Account               Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Telegram_User_ibfk_1")
  Sequence              Sequence? @relation(fields: [sequence_id], references: [sequence_id], map: "Telegram_User_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Template {
  template_id          Int                    @id @default(autoincrement())
  block_id             Int?
  type                 String?                @db.VarChar(255)
  number               Int?
  createdAt            DateTime               @db.DateTime(0)
  updatedAt            DateTime               @db.DateTime(0)
  deletedAt            DateTime?              @db.DateTime(0)
  brn                  String?                @db.VarChar(255)
  Element              Element[]
  Generic_Sent_Payment Generic_Sent_Payment[]
  Payment              Payment[]
  Platform_Template    Platform_Template[]
  Sent_Payment         Sent_Payment[]
  Block                Block?                 @relation(fields: [block_id], references: [block_id], onDelete: Cascade, map: "Template_ibfk_1")
  Template_Attribute   Template_Attribute[]
  Template_Connector   Template_Connector[]

  @@index([block_id], map: "block_id")
}

model Template_Attribute {
  template_attribute_id  Int       @id @default(autoincrement())
  template_id            Int?
  name                   String?   @db.VarChar(255)
  value                  String?   @db.Text
  createdAt              DateTime  @db.DateTime(0)
  updatedAt              DateTime  @db.DateTime(0)
  deletedAt              DateTime? @db.DateTime(0)
  language_id            Int?
  brn                    String?   @db.VarChar(255)
  facebook_attachment_id String?   @default("") @db.VarChar(255)
  Template               Template? @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "Template_Attribute_ibfk_1")

  @@index([template_id], map: "template_id")
}

model Template_Connector {
  template_connector_id Int       @id @default(autoincrement())
  template_id           Int?
  next_block_id         Int?
  title                 String?   @db.VarChar(255)
  number                Int?
  type                  String?   @db.VarChar(255)
  image_url             String?   @db.VarChar(255)
  url                   String?   @db.MediumText
  is_extension          Boolean?
  size                  String?   @db.VarChar(255)
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  phone                 String?   @db.VarChar(150)
  user_attribute_id     Int?
  data                  String?   @db.Text
  language_id           Int?
  payload_type          String?   @db.VarChar(150)
  brn                   String?   @db.VarChar(255)
  Template              Template? @relation(fields: [template_id], references: [template_id], onDelete: Cascade, map: "Template_Connector_ibfk_1")

  @@index([template_id], map: "template_id")
}

model Test {
  test_id    Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  account_id Int?
  bmid       String?   @db.VarChar(255)
  token      String?   @db.VarChar(255)
  subscribed Boolean?
  createdAt  DateTime  @db.DateTime(0)
  updatedAt  DateTime  @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  Account    Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Test_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Test_User {
  user_id               Int       @id @default(autoincrement())
  ip                    String?   @db.VarChar(255)
  container             String?   @unique(map: "container") @db.VarChar(255)
  first_name            String?   @db.VarChar(255)
  last_name             String?   @db.VarChar(255)
  gender                String?   @db.VarChar(255)
  profile_pic           String?   @db.VarChar(255)
  account_id            Int?
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime? @db.DateTime(0)
  sequence_step         Int?      @default(0)
  is_subscribed         Boolean?  @default(true)
  createdAt             DateTime  @db.DateTime(0)
  updatedAt             DateTime  @db.DateTime(0)
  deletedAt             DateTime? @db.DateTime(0)
  Account               Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Test_User_ibfk_1")
  Sequence              Sequence? @relation(fields: [sequence_id], references: [sequence_id], map: "Test_User_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Topic {
  topic_id   Int          @id @default(autoincrement())
  name       String?      @db.VarChar(255)
  reference  String?      @db.VarChar(255)
  account_id Int?
  createdAt  DateTime     @db.DateTime(0)
  updatedAt  DateTime     @db.DateTime(0)
  deletedAt  DateTime?    @db.DateTime(0)
  brn        String?      @db.VarChar(255)
  Account    Account?     @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Topic_ibfk_1")
  Topic_Post Topic_Post[]

  @@index([account_id], map: "account_id")
}

model Topic_Post {
  topic_post_id Int       @id @default(autoincrement())
  topic_id      Int?
  post_id       Int?
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  Topic         Topic?    @relation(fields: [topic_id], references: [topic_id], onDelete: Cascade, map: "Topic_Post_ibfk_1")
  Post          Post?     @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "Topic_Post_ibfk_2")

  @@unique([topic_id, post_id], map: "Topic_Post_topic_id_post_id_unique")
  @@index([post_id], map: "post_id")
}

model Twitter {
  twitter_id                  Int       @id @default(autoincrement())
  name                        String?   @db.VarChar(255)
  account_id                  Int?
  twitter_user_id             String?   @db.VarChar(255)
  twitter_access_token        String?   @db.Text
  twitter_access_token_secret String?   @db.Text
  createdAt                   DateTime  @db.DateTime(0)
  updatedAt                   DateTime  @db.DateTime(0)
  deletedAt                   DateTime? @db.DateTime(0)
  subscribed                  Boolean?  @default(false)
  language_id                 Int?
  Account                     Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Twitter_ibfk_1")

  @@index([account_id], map: "account_id")
}

model TwitterDM {
  twitter_dm_id               Int       @id @default(autoincrement())
  name                        String?   @db.VarChar(255)
  account_id                  Int?
  twitter_dm_user_id          String?   @db.VarChar(255)
  twitter_access_token        String?   @db.Text
  twitter_access_token_secret String?   @db.Text
  subscribed                  Boolean?
  createdAt                   DateTime  @db.DateTime(0)
  updatedAt                   DateTime  @db.DateTime(0)
  deletedAt                   DateTime? @db.DateTime(0)
  Account                     Account?  @relation(fields: [account_id], references: [account_id], map: "TwitterDM_ibfk_1")

  @@index([account_id], map: "account_id")
}

model TwitterDM_User {
  user_id               Int                   @id @default(autoincrement())
  first_name            String?               @db.VarChar(255)
  last_name             String?               @db.VarChar(255)
  screen_name           String?               @db.VarChar(255)
  profile_pic           String?               @db.VarChar(255)
  twitter_id            String?               @db.VarChar(250)
  followers             Int?
  friends               Int?
  tweets                Int?
  is_protected          Boolean?
  is_verified           Boolean?
  account_id            Int?
  gender                String?               @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?             @db.DateTime(0)
  sequence_step         Int?                  @default(0)
  is_subscribed         Boolean?
  createdAt             DateTime              @db.DateTime(0)
  updatedAt             DateTime              @db.DateTime(0)
  deletedAt             DateTime?             @db.DateTime(0)
  last_info_update      String?               @db.VarChar(255)
  Account               Account?              @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "TwitterDM_User_ibfk_1")
  Sequence              Sequence?             @relation(fields: [sequence_id], references: [sequence_id], map: "TwitterDM_User_ibfk_2")
  TwitterDM_User_Case   TwitterDM_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model TwitterDM_User_Case {
  twitter_user_case_id Int             @id @default(autoincrement())
  user_id              Int?
  case_id              Int?
  createdAt            DateTime        @db.DateTime(0)
  updatedAt            DateTime        @db.DateTime(0)
  deletedAt            DateTime?       @db.DateTime(0)
  TwitterDM_User       TwitterDM_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "TwitterDM_User_Case_ibfk_1")
  Case                 Case?           @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "TwitterDM_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "TwitterDM_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Twitter_User {
  user_id               Int                 @id @default(autoincrement())
  first_name            String?             @db.VarChar(255)
  last_name             String?             @db.VarChar(255)
  screen_name           String?             @db.VarChar(255)
  profile_pic           String?             @db.VarChar(255)
  twitter_id            String?             @db.VarChar(255)
  followers             Int?
  friends               Int?
  tweets                Int?
  is_protected          Boolean?
  is_verified           Boolean?
  account_id            Int?
  gender                String?             @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?           @db.DateTime(0)
  sequence_step         Int?                @default(0)
  is_subscribed         Boolean?
  createdAt             DateTime            @db.DateTime(0)
  updatedAt             DateTime            @db.DateTime(0)
  deletedAt             DateTime?           @db.DateTime(0)
  last_info_update      String?             @db.VarChar(255)
  Account               Account?            @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Twitter_User_ibfk_1")
  Sequence              Sequence?           @relation(fields: [sequence_id], references: [sequence_id], map: "Twitter_User_ibfk_2")
  Twitter_User_Case     Twitter_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Twitter_User_Case {
  twitter_user_case_id Int           @id @default(autoincrement())
  user_id              Int?
  case_id              Int?
  createdAt            DateTime      @db.DateTime(0)
  updatedAt            DateTime      @db.DateTime(0)
  deletedAt            DateTime?     @db.DateTime(0)
  Twitter_User         Twitter_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Twitter_User_Case_ibfk_1")
  Case                 Case?         @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Twitter_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Twitter_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Usage {
  usage_id              Int          @id @default(autoincrement())
  account_id            Int?
  due_date              DateTime?    @db.DateTime(0)
  total_users           Int?
  number_users_exceeded Int?
  plan_id               Int?
  cost_users_exceeded   Int?
  createdAt             DateTime     @db.DateTime(0)
  updatedAt             DateTime     @db.DateTime(0)
  deletedAt             DateTime?    @db.DateTime(0)
  Billing               Billing[]
  Account               Account?     @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Usage_ibfk_1")
  Plan                  Plan?        @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, map: "Usage_ibfk_2")
  User_Usage            User_Usage[]

  @@index([account_id], map: "account_id")
  @@index([plan_id], map: "plan_id")
}

model User {
  user_id                                Int                            @id @default(autoincrement())
  platform_model_id                      Int?
  account_id                             Int?
  external_id                            String?                        @db.VarChar(255)
  link_code                              String?                        @db.Char(36)
  first_name                             String?                        @db.VarChar(255)
  last_name                              String?                        @db.VarChar(255)
  screen_name                            String?                        @db.VarChar(255)
  gender                                 String?                        @db.VarChar(255)
  locale                                 String?                        @db.VarChar(255)
  phone_number                           String?                        @db.VarChar(255)
  ip                                     String?                        @db.VarChar(255)
  container                              String?                        @db.VarChar(255)
  timezone                               String?                        @db.VarChar(255)
  followers                              Int?
  friends                                Int?
  tweets                                 Int?
  is_protected                           Boolean?
  is_verified                            Boolean?
  platform                               String?                        @db.VarChar(255)
  bot_enabled                            Boolean?                       @default(true)
  sequence_id                            Int?
  sequence_step                          Int?                           @default(0)
  is_subscribed                          Boolean?                       @default(true)
  profile_pic                            String?                        @db.Text
  last_info_update                       DateTime?                      @db.DateTime(0)
  last_interaction_time                  DateTime?                      @db.DateTime(0)
  createdAt                              DateTime                       @db.DateTime(0)
  updatedAt                              DateTime                       @db.DateTime(0)
  deletedAt                              DateTime?                      @db.DateTime(0)
  complex_key                            String?                        @db.VarChar(255)
  user_email                             String?                        @db.VarChar(255)
  opt_in                                 Boolean?
  banned                                 Boolean?                       @default(false)
  Case                                   Case[]
  Chat_Activity                          Chat_Activity[]
  Feedback                               Feedback[]
  Generic_Event                          Generic_Event[]
  Generic_Order                          Generic_Order[]
  Generic_Response                       Generic_Response[]
  Generic_Sent_Payment                   Generic_Sent_Payment[]
  Generic_User_Attribute_Value           Generic_User_Attribute_Value[]
  Generic_User_Flow                      Generic_User_Flow[]
  Account                                Account?                       @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "User_ibfk_1")
  Sequence                               Sequence?                      @relation(fields: [sequence_id], references: [sequence_id], map: "User_ibfk_2")
  User_Card                              User_Card[]
  User_Case                              User_Case[]
  User_Connection                        User_Connection[]
  User_Usage_User_Usage_user_idToUser    User_Usage[]                   @relation("User_Usage_user_idToUser")
  User_Usage_User_Usage_UserUserIdToUser User_Usage[]                   @relation("User_Usage_UserUserIdToUser")
  Webhook_Request                        Webhook_Request[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model User_Attribute {
  user_attribute_id                                                                          Int                            @id @default(autoincrement())
  account_id                                                                                 Int?
  name                                                                                       String?                        @db.VarChar(255)
  type                                                                                       String?                        @db.VarChar(255)
  description                                                                                String?                        @db.VarChar(255)
  createdAt                                                                                  DateTime                       @db.DateTime(0)
  updatedAt                                                                                  DateTime                       @db.DateTime(0)
  deletedAt                                                                                  DateTime?                      @db.DateTime(0)
  brn                                                                                        String?                        @db.VarChar(255)
  is_important                                                                               Boolean?
  default_value                                                                              String?                        @db.VarChar(255)
  lifetime                                                                                   Int?
  Block                                                                                      Block[]
  Generic_User_Attribute_Value                                                               Generic_User_Attribute_Value[]
  Metric_Attribute                                                                           Metric_Attribute[]
  Package_User_Attribute_Package_User_Attribute_user_attribute_idToUser_Attribute            Package_User_Attribute[]       @relation("Package_User_Attribute_user_attribute_idToUser_Attribute")
  Package_User_Attribute_Package_User_Attribute_UserAttributeUserAttributeIdToUser_Attribute Package_User_Attribute[]       @relation("Package_User_Attribute_UserAttributeUserAttributeIdToUser_Attribute")
  Process_Information                                                                        Process_Information[]
  Rate_Parameter                                                                             Rate_Parameter[]
  Account                                                                                    Account?                       @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "User_Attribute_ibfk_1")
  User_Attribute_Value                                                                       User_Attribute_Value[]

  @@index([account_id], map: "account_id")
}

model User_Attribute_Value {
  user_attribute_value_id Int             @id @default(autoincrement())
  user_attribute_id       Int?
  value                   String?         @db.MediumText
  user_id                 Int?
  createdAt               DateTime        @db.DateTime(0)
  updatedAt               DateTime        @db.DateTime(0)
  deletedAt               DateTime?       @db.DateTime(0)
  platform                String?         @default("messenger") @db.VarChar(150)
  cipher                  String?         @db.Text
  User_Attribute          User_Attribute? @relation(fields: [user_attribute_id], references: [user_attribute_id], onDelete: Cascade, map: "User_Attribute_Value_ibfk_1")

  @@index([user_attribute_id], map: "user_attribute_id")
  @@index([user_id], map: "user_id")
}

model User_Card {
  user_card_id Int       @id @default(autoincrement())
  user_id      Int?
  token        String?   @db.VarChar(255)
  cc_number    String?   @db.VarChar(255)
  cc_expmonth  String?   @db.VarChar(255)
  cc_expyear   String?   @db.VarChar(255)
  cc_type      String?   @db.VarChar(255)
  cc_mask      String?   @db.VarChar(255)
  email        String?   @db.VarChar(255)
  nb_company   String?   @db.VarChar(255)
  nb_merchant  String?   @db.VarChar(255)
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  is_default   Boolean?
  User         User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "User_Card_ibfk_1")

  @@index([user_id], map: "user_id")
}

model User_Case {
  user_case_id Int       @id @default(autoincrement())
  user_id      Int?
  case_id      Int?
  platform     String?   @db.VarChar(255)
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  User         User?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "User_Case_ibfk_1")
  Case         Case?     @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model User_Connection {
  user_connection_id Int       @id @default(autoincrement())
  user_id            Int?
  client_id          String    @db.VarChar(255)
  ip_address         String?   @db.VarChar(255)
  first_connection   DateTime? @db.DateTime(0)
  last_connection    DateTime? @db.DateTime(0)
  last_disconnection DateTime? @db.DateTime(0)
  active             Boolean?
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  User               User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "User_Connection_ibfk_1")

  @@index([user_id], map: "user_id")
}

model User_Flow {
  user_flow_id     Int       @id @default(autoincrement())
  user_id          Int?
  account_id       Int?
  flow_id          Int?
  current_block_id Int?
  done             Boolean?
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  active           Boolean?  @default(false)
  platform         String?   @default("messenger") @db.VarChar(150)
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "User_Flow_ibfk_2")
  Flow             Flow?     @relation(fields: [flow_id], references: [flow_id], onDelete: NoAction, map: "User_Flow_ibfk_3")
  Block            Block?    @relation(fields: [current_block_id], references: [block_id], onDelete: NoAction, map: "User_Flow_ibfk_4")

  @@index([account_id], map: "account_id")
  @@index([current_block_id], map: "current_block_id")
  @@index([flow_id], map: "flow_id")
  @@index([user_id], map: "user_id")
}

model User_Usage {
  user_usage_id                    Int       @id @default(autoincrement())
  user_id                          Int?
  usage_id                         Int?
  createdAt                        DateTime  @db.DateTime(0)
  updatedAt                        DateTime  @db.DateTime(0)
  deletedAt                        DateTime? @db.DateTime(0)
  UserUserId                       Int?
  User_User_Usage_user_idToUser    User?     @relation("User_Usage_user_idToUser", fields: [user_id], references: [user_id], onDelete: NoAction, map: "User_Usage_ibfk_1")
  Usage                            Usage?    @relation(fields: [usage_id], references: [usage_id], onDelete: Cascade, map: "User_Usage_ibfk_2")
  User_User_Usage_UserUserIdToUser User?     @relation("User_Usage_UserUserIdToUser", fields: [UserUserId], references: [user_id], onDelete: Cascade, map: "User_Usage_ibfk_3")

  @@unique([usage_id, UserUserId], map: "User_Usage_usage_id_UserUserId_unique")
  @@index([UserUserId], map: "UserUserId")
  @@index([user_id], map: "user_id")
}

model Var_Opt {
  v_o_id             Int              @id @default(autoincrement())
  variant_value_id   Int?
  product_variant_id Int?
  createdAt          DateTime         @db.DateTime(0)
  updatedAt          DateTime         @db.DateTime(0)
  deletedAt          DateTime?        @db.DateTime(0)
  Variant_Value      Variant_Value?   @relation(fields: [variant_value_id], references: [variant_value_id], onDelete: NoAction, map: "Var_Opt_ibfk_1")
  Product_Variant    Product_Variant? @relation(fields: [product_variant_id], references: [product_variant_id], onDelete: Cascade, map: "Var_Opt_ibfk_2")

  @@unique([variant_value_id, product_variant_id], map: "Var_Opt_variant_value_id_product_variant_id_unique")
  @@index([product_variant_id], map: "product_variant_id")
}

model Variant {
  variant_id  Int       @id @default(autoincrement())
  product_id  Int?
  name        String?   @db.VarChar(255)
  description String?   @db.Text
  enabled     Boolean?
  createdAt   DateTime  @db.DateTime(0)
  updatedAt   DateTime  @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  Product     Product?  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "Variant_ibfk_1")

  @@index([product_id], map: "product_id")
}

model Variant_Stock {
  variant_stock_id   Int              @id @default(autoincrement())
  product_variant_id Int?
  pickup_location_id Int?
  stock              Int?
  price              Float?           @db.Float
  enabled            Boolean?         @default(true)
  createdAt          DateTime         @db.DateTime(0)
  updatedAt          DateTime         @db.DateTime(0)
  deletedAt          DateTime?        @db.DateTime(0)
  Product_Variant    Product_Variant? @relation(fields: [product_variant_id], references: [product_variant_id], onDelete: Restrict, onUpdate: Restrict, map: "Variant_Stock_ibfk_1")
  Pickup_Location    Pickup_Location? @relation(fields: [pickup_location_id], references: [pickup_location_id], onDelete: Restrict, onUpdate: Restrict, map: "Variant_Stock_ibfk_2")

  @@index([pickup_location_id], map: "pickup_location_id")
  @@index([product_variant_id], map: "product_variant_id")
}

model Variant_Value {
  variant_value_id Int       @id @default(autoincrement())
  variant_id       Int?
  value            String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  Var_Opt          Var_Opt[]

  @@index([variant_id], map: "product_variant_id")
}

model View {
  view_id     Int          @id @default(autoincrement())
  name        String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  slug        String?      @db.VarChar(255)
  createdAt   DateTime     @db.DateTime(0)
  updatedAt   DateTime     @db.DateTime(0)
  deletedAt   DateTime?    @db.DateTime(0)
  View_Visit  View_Visit[]
}

model View_Visit {
  view_visit_id Int       @id @default(autoincrement())
  account_id    Int?
  view_id       Int?
  user_id       String?   @db.VarChar(255)
  createdAt     DateTime  @db.DateTime(0)
  updatedAt     DateTime  @db.DateTime(0)
  deletedAt     DateTime? @db.DateTime(0)
  View          View?     @relation(fields: [view_id], references: [view_id], onDelete: Cascade, map: "View_Visit_ibfk_1")

  @@index([view_id], map: "view_id")
}

model Voice_Twilio {
  voice_twilio_id Int       @id @default(autoincrement())
  name            String?   @db.VarChar(255)
  account_id      Int?
  subscribed      Boolean?
  twilio_number   String?   @db.VarChar(255)
  account_sid     String?   @db.VarChar(255)
  auth_token      String?   @db.VarChar(255)
  voice_gender    String?   @db.VarChar(255)
  voice_language  String?   @db.VarChar(255)
  createdAt       DateTime  @db.DateTime(0)
  updatedAt       DateTime  @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
  Account         Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Voice_Twilio_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Voicebot {
  voicebot_id  Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  account_id   Int?
  subscribed   Boolean?  @default(true)
  phone_number String?   @db.VarChar(255)
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  get_started  Int?
  Account      Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Voicebot_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Waba {
  waba_id             String              @id @db.VarChar(255)
  name                String?             @db.VarChar(255)
  access_token        String?             @db.VarChar(255)
  status              String?             @db.VarChar(255)
  createdAt           DateTime            @db.DateTime(0)
  updatedAt           DateTime            @db.DateTime(0)
  deletedAt           DateTime?           @db.DateTime(0)
  business_manager_id String?             @db.VarChar(255)
  Whatsapp_Template   Whatsapp_Template[]
}

model Web_Paycredential {
  web_paycredential_id Int       @id @default(autoincrement())
  company_id           String?   @db.VarChar(255)
  branch_id            String?   @db.VarChar(255)
  user                 String?   @db.VarChar(255)
  password             String?   @db.VarChar(255)
  key                  String?   @db.VarChar(255)
  data0                String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  is_sandbox           Boolean?  @default(false)
  merchant             String?   @db.VarChar(255)
}

model Webhook {
  webhook_id         Int               @id @default(autoincrement())
  account_id         Int?
  endpoint           String?           @db.VarChar(255)
  next_block_success Int?
  next_block_error   Int?
  reusable           Boolean?
  createdAt          DateTime          @db.DateTime(0)
  updatedAt          DateTime          @db.DateTime(0)
  deletedAt          DateTime?         @db.DateTime(0)
  method             String?           @db.VarChar(255)
  name               String?           @db.VarChar(255)
  is_incoming        Boolean?
  outgoing_type      String?           @db.VarChar(255)
  url                String?           @db.VarChar(255)
  headers            String?           @db.Text
  config             String?           @db.Text
  platform           String?           @db.VarChar(255)
  external_id        String?           @db.VarChar(255)
  last_name          String?           @db.VarChar(255)
  first_name         String?           @db.VarChar(255)
  platform_model_id  Int?
  Account            Account?          @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Webhook_ibfk_1")
  Webhook_Request    Webhook_Request[]

  @@index([account_id], map: "account_id")
}

model Webhook_Request {
  webhook_request_id Int       @id @default(autoincrement())
  webhook_id         Int?
  user_id            Int?
  executed_at        DateTime? @db.DateTime(0)
  body               String?   @db.VarChar(255)
  success            Boolean?
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  Webhook            Webhook?  @relation(fields: [webhook_id], references: [webhook_id], onDelete: Cascade, map: "Webhook_Request_ibfk_1")
  User               User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, map: "Webhook_Request_ibfk_2")

  @@index([user_id], map: "user_id")
  @@index([webhook_id], map: "webhook_id")
}

model Whatsapp {
  whatsapp_id  Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  account_id   Int?
  api_key      String?   @db.VarChar(255)
  phone_number String?   @db.VarChar(255)
  subscribed   Boolean?
  wa_id        String?   @db.VarChar(255)
  createdAt    DateTime  @db.DateTime(0)
  updatedAt    DateTime  @db.DateTime(0)
  deletedAt    DateTime? @db.DateTime(0)
  Account      Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Gupshup {
  whatsapp_gupshup_id Int       @id @default(autoincrement())
  name                String    @unique(map: "name") @db.VarChar(255)
  account_id          Int?
  subscribed          Boolean?
  api_key             String?   @db.VarChar(255)
  number              String?   @db.VarChar(255)
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  save_stickers       Boolean?
  Account             Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Gupshup_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Infobip {
  whatsapp_infobip_id Int       @id @default(autoincrement())
  name                String?   @db.VarChar(255)
  account_id          Int?
  subscribed          Boolean?
  client_url          String?   @db.VarChar(255)
  api_token           String?   @db.VarChar(255)
  scenario            String?   @db.VarChar(255)
  createdAt           DateTime  @db.DateTime(0)
  updatedAt           DateTime  @db.DateTime(0)
  deletedAt           DateTime? @db.DateTime(0)
  number              String?   @db.VarChar(255)
  Account             Account?  @relation(fields: [account_id], references: [account_id], map: "Whatsapp_Infobip_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Infobip_User {
  user_id                    Int                          @id @default(autoincrement())
  first_name                 String?                      @db.VarChar(255)
  last_name                  String?                      @db.VarChar(255)
  profile_pic                String?                      @db.VarChar(255)
  account_id                 Int?
  gender                     String?                      @db.VarChar(255)
  bot_enabled                Boolean?
  sequence_id                Int?
  last_interaction_time      DateTime?                    @db.DateTime(0)
  sequence_step              Int?                         @default(0)
  is_subscribed              Boolean?
  wa_number                  String?                      @db.VarChar(255)
  last_info_update           DateTime?                    @db.DateTime(0)
  createdAt                  DateTime                     @db.DateTime(0)
  updatedAt                  DateTime                     @db.DateTime(0)
  deletedAt                  DateTime?                    @db.DateTime(0)
  Account                    Account?                     @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Infobip_User_ibfk_1")
  Sequence                   Sequence?                    @relation(fields: [sequence_id], references: [sequence_id], map: "Whatsapp_Infobip_User_ibfk_2")
  Whatsapp_Infobip_User_Case Whatsapp_Infobip_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Whatsapp_Infobip_User_Case {
  wa_infobip_user_case_id Int                    @id @default(autoincrement())
  user_id                 Int?
  case_id                 Int?
  createdAt               DateTime               @db.DateTime(0)
  updatedAt               DateTime               @db.DateTime(0)
  deletedAt               DateTime?              @db.DateTime(0)
  Whatsapp_Infobip_User   Whatsapp_Infobip_User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Whatsapp_Infobip_User_Case_ibfk_1")
  Case                    Case?                  @relation(fields: [case_id], references: [case_id], onDelete: Cascade, map: "Whatsapp_Infobip_User_Case_ibfk_2")

  @@unique([user_id, case_id], map: "Whatsapp_Infobip_User_Case_user_id_case_id_unique")
  @@index([case_id], map: "case_id")
}

model Whatsapp_Likenuuk {
  whatsapp_likenuuk_id Int       @id @default(autoincrement())
  name                 String?   @db.VarChar(255)
  account_id           Int?
  subscribed           Boolean?
  api_token            String?   @db.VarChar(255)
  company_id           String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  Account              Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Likenuuk_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Official {
  whatsapp_official_id                                Int       @id @default(autoincrement())
  name                                                String?   @db.VarChar(255)
  account_id                                          Int?
  subscribed                                          Boolean?
  client_url                                          String?   @db.VarChar(255)
  createdAt                                           DateTime  @db.DateTime(0)
  updatedAt                                           DateTime  @db.DateTime(0)
  deletedAt                                           DateTime? @db.DateTime(0)
  AccountAccountId                                    Int?
  auth_token                                          String?   @db.VarChar(255)
  api_token                                           String?   @db.VarChar(255)
  namespace                                           String?   @db.VarChar(255)
  phone_number                                        String?   @default("0") @db.VarChar(255)
  admin_username                                      String?   @default("0") @db.VarChar(255)
  admin_password                                      String?   @default("0") @db.VarChar(255)
  waba_id                                             String?   @default("0") @db.VarChar(255)
  title                                               String?   @db.VarChar(255)
  on_cloud                                            Boolean?  @default(false)
  system_user_access_token                            String?   @db.VarChar(255)
  phone_id                                            String?   @default("0") @db.VarChar(255)
  Account_Whatsapp_Official_account_idToAccount       Account?  @relation("Whatsapp_Official_account_idToAccount", fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Official_ibfk_1")
  Account_Whatsapp_Official_AccountAccountIdToAccount Account?  @relation("Whatsapp_Official_AccountAccountIdToAccount", fields: [AccountAccountId], references: [account_id], map: "Whatsapp_Official_ibfk_2")

  @@index([AccountAccountId], map: "AccountAccountId")
  @@index([account_id], map: "account_id")
}

model Whatsapp_Official_User {
  user_id                     Int                           @id @default(autoincrement())
  first_name                  String?                       @db.VarChar(255)
  last_name                   String?                       @db.VarChar(255)
  profile_pic                 String?                       @db.VarChar(255)
  account_id                  Int?
  gender                      String?                       @db.VarChar(255)
  bot_enabled                 Boolean?
  sequence_id                 Int?
  last_interaction_time       DateTime?                     @db.DateTime(0)
  sequence_step               Int?                          @default(0)
  is_subscribed               Boolean?
  wa_id                       String?                       @db.VarChar(255)
  createdAt                   DateTime                      @db.DateTime(0)
  updatedAt                   DateTime                      @db.DateTime(0)
  deletedAt                   DateTime?                     @db.DateTime(0)
  last_info_update            String?                       @db.VarChar(255)
  Account                     Account?                      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Official_User_ibfk_1")
  Sequence                    Sequence?                     @relation(fields: [sequence_id], references: [sequence_id], map: "Whatsapp_Official_User_ibfk_2")
  Whatsapp_Official_User_Case Whatsapp_Official_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Whatsapp_Official_User_Case {
  wa_official_user_case_id                          Int                           @id @default(autoincrement())
  user_id                                           Int?
  case_id                                           Int?
  createdAt                                         DateTime                      @db.DateTime(0)
  updatedAt                                         DateTime                      @db.DateTime(0)
  deletedAt                                         DateTime?                     @db.DateTime(0)
  WhatsappOfficialUserUserId                        Int?
  CaseCaseId                                        Int?
  Whatsapp_Official_User_Case                       Whatsapp_Official_User_Case?  @relation("Whatsapp_Official_User_CaseToWhatsapp_Official_User_Case", fields: [user_id], references: [wa_official_user_case_id], onDelete: Cascade, map: "Whatsapp_Official_User_Case_ibfk_1")
  other_Whatsapp_Official_User_Case                 Whatsapp_Official_User_Case[] @relation("Whatsapp_Official_User_CaseToWhatsapp_Official_User_Case")
  Case_Whatsapp_Official_User_Case_case_idToCase    Case?                         @relation("Whatsapp_Official_User_Case_case_idToCase", fields: [case_id], references: [case_id], onDelete: Cascade, map: "Whatsapp_Official_User_Case_ibfk_2")
  Whatsapp_Official_User                            Whatsapp_Official_User?       @relation(fields: [WhatsappOfficialUserUserId], references: [user_id], onDelete: Cascade, map: "Whatsapp_Official_User_Case_ibfk_3")
  Case_Whatsapp_Official_User_Case_CaseCaseIdToCase Case?                         @relation("Whatsapp_Official_User_Case_CaseCaseIdToCase", fields: [CaseCaseId], references: [case_id], onDelete: Cascade, map: "Whatsapp_Official_User_Case_ibfk_4")

  @@unique([user_id, CaseCaseId], map: "Whatsapp_Official_User_Case_user_id_CaseCaseId_unique")
  @@unique([case_id, WhatsappOfficialUserUserId], map: "wa_official_user_case_id")
  @@index([CaseCaseId], map: "CaseCaseId")
  @@index([WhatsappOfficialUserUserId], map: "WhatsappOfficialUserUserId")
}

model Whatsapp_Smooch {
  whatsapp_smooch_id Int       @id @default(autoincrement())
  account_id         Int?
  subscribed         Boolean?
  name               String?   @db.VarChar(255)
  app_id             String?   @db.VarChar(255)
  secret             String?   @db.VarChar(255)
  auth_type          String?   @db.VarChar(255)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  app_key            String?   @db.VarChar(255)
  Account            Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Smooch_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Template {
  whatsapp_template_id Int       @id @default(autoincrement())
  name                 String?   @db.VarChar(255)
  language             String?   @db.VarChar(255)
  status               String?   @db.VarChar(255)
  category             String?   @db.VarChar(255)
  id                   String?   @db.VarChar(255)
  waba_id              String?   @db.VarChar(255)
  createdAt            DateTime  @db.DateTime(0)
  updatedAt            DateTime  @db.DateTime(0)
  deletedAt            DateTime? @db.DateTime(0)
  Waba                 Waba?     @relation(fields: [waba_id], references: [waba_id], onDelete: Cascade, map: "Whatsapp_Template_ibfk_1")

  @@index([waba_id], map: "waba_id")
}

model Whatsapp_Twilio {
  whatsapp_twilio_id Int       @id @default(autoincrement())
  name               String?   @db.VarChar(255)
  account_id         Int?
  subscribed         Boolean?
  twilio_number      String?   @db.VarChar(255)
  createdAt          DateTime  @db.DateTime(0)
  updatedAt          DateTime  @db.DateTime(0)
  deletedAt          DateTime? @db.DateTime(0)
  account_sid        String?   @db.VarChar(255)
  auth_token         String?   @db.VarChar(255)
  Account            Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Twilio_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Twilio_User {
  user_id                   Int                         @id @default(autoincrement())
  first_name                String?                     @db.VarChar(255)
  last_name                 String?                     @db.VarChar(255)
  profile_pic               String?                     @db.VarChar(255)
  phone_number              String?                     @db.VarChar(255)
  twilio_number             String?                     @db.VarChar(255)
  account_id                Int?
  gender                    String?                     @db.VarChar(255)
  bot_enabled               Boolean?
  sequence_id               Int?
  last_interaction_time     DateTime?                   @db.DateTime(0)
  sequence_step             Int?                        @default(0)
  is_subscribed             Boolean?
  last_info_update          DateTime?                   @db.DateTime(0)
  createdAt                 DateTime                    @db.DateTime(0)
  updatedAt                 DateTime                    @db.DateTime(0)
  deletedAt                 DateTime?                   @db.DateTime(0)
  Account                   Account?                    @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Twilio_User_ibfk_1")
  Sequence                  Sequence?                   @relation(fields: [sequence_id], references: [sequence_id], map: "Whatsapp_Twilio_User_ibfk_2")
  Whatsapp_Twilio_User_Case Whatsapp_Twilio_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Whatsapp_Twilio_User_Case {
  wa_twilio_user_case_id                          Int                         @id @default(autoincrement())
  user_id                                         Int?
  case_id                                         Int?
  createdAt                                       DateTime                    @db.DateTime(0)
  updatedAt                                       DateTime                    @db.DateTime(0)
  deletedAt                                       DateTime?                   @db.DateTime(0)
  WhatsappTwilioUserUserId                        Int?
  CaseCaseId                                      Int?
  Whatsapp_Twilio_User_Case                       Whatsapp_Twilio_User_Case?  @relation("Whatsapp_Twilio_User_CaseToWhatsapp_Twilio_User_Case", fields: [user_id], references: [wa_twilio_user_case_id], onDelete: Cascade, map: "Whatsapp_Twilio_User_Case_ibfk_1")
  other_Whatsapp_Twilio_User_Case                 Whatsapp_Twilio_User_Case[] @relation("Whatsapp_Twilio_User_CaseToWhatsapp_Twilio_User_Case")
  Case_Whatsapp_Twilio_User_Case_case_idToCase    Case?                       @relation("Whatsapp_Twilio_User_Case_case_idToCase", fields: [case_id], references: [case_id], onDelete: Cascade, map: "Whatsapp_Twilio_User_Case_ibfk_2")
  Whatsapp_Twilio_User                            Whatsapp_Twilio_User?       @relation(fields: [WhatsappTwilioUserUserId], references: [user_id], onDelete: Cascade, map: "Whatsapp_Twilio_User_Case_ibfk_3")
  Case_Whatsapp_Twilio_User_Case_CaseCaseIdToCase Case?                       @relation("Whatsapp_Twilio_User_Case_CaseCaseIdToCase", fields: [CaseCaseId], references: [case_id], onDelete: Cascade, map: "Whatsapp_Twilio_User_Case_ibfk_4")

  @@unique([user_id, CaseCaseId], map: "Whatsapp_Twilio_User_Case_user_id_CaseCaseId_unique")
  @@unique([case_id, WhatsappTwilioUserUserId], map: "wa_twilio_user_case_id")
  @@index([CaseCaseId], map: "CaseCaseId")
  @@index([WhatsappTwilioUserUserId], map: "WhatsappTwilioUserUserId")
}

model Whatsapp_User {
  user_id               Int                  @id @default(autoincrement())
  first_name            String?              @db.VarChar(255)
  last_name             String?              @db.VarChar(255)
  profile_pic           String?              @db.VarChar(255)
  phone_number          String?              @db.VarChar(255)
  wa_id                 String?              @db.VarChar(255)
  account_id            Int?
  gender                String?              @db.VarChar(255)
  bot_enabled           Boolean?
  sequence_id           Int?
  last_interaction_time DateTime?            @db.DateTime(0)
  sequence_step         Int?                 @default(0)
  is_subscribed         Boolean?
  createdAt             DateTime             @db.DateTime(0)
  updatedAt             DateTime             @db.DateTime(0)
  deletedAt             DateTime?            @db.DateTime(0)
  last_info_update      String?              @db.VarChar(255)
  Account               Account?             @relation(fields: [account_id], references: [account_id], onDelete: NoAction, map: "Whatsapp_User_ibfk_1")
  Sequence              Sequence?            @relation(fields: [sequence_id], references: [sequence_id], map: "Whatsapp_User_ibfk_2")
  Whatsapp_User_Case    Whatsapp_User_Case[]

  @@index([account_id], map: "account_id")
  @@index([sequence_id], map: "sequence_id")
}

model Whatsapp_User_Case {
  whatsapp_user_case_id                    Int                  @id @default(autoincrement())
  user_id                                  Int?
  case_id                                  Int?
  createdAt                                DateTime             @db.DateTime(0)
  updatedAt                                DateTime             @db.DateTime(0)
  deletedAt                                DateTime?            @db.DateTime(0)
  WhatsappUserUserId                       Int?
  CaseCaseId                               Int?
  Whatsapp_User_Case                       Whatsapp_User_Case?  @relation("Whatsapp_User_CaseToWhatsapp_User_Case", fields: [user_id], references: [whatsapp_user_case_id], onDelete: Cascade, map: "Whatsapp_User_Case_ibfk_1")
  other_Whatsapp_User_Case                 Whatsapp_User_Case[] @relation("Whatsapp_User_CaseToWhatsapp_User_Case")
  Case_Whatsapp_User_Case_case_idToCase    Case?                @relation("Whatsapp_User_Case_case_idToCase", fields: [case_id], references: [case_id], onDelete: Cascade, map: "Whatsapp_User_Case_ibfk_2")
  Whatsapp_User                            Whatsapp_User?       @relation(fields: [WhatsappUserUserId], references: [user_id], onDelete: Cascade, map: "Whatsapp_User_Case_ibfk_3")
  Case_Whatsapp_User_Case_CaseCaseIdToCase Case?                @relation("Whatsapp_User_Case_CaseCaseIdToCase", fields: [CaseCaseId], references: [case_id], onDelete: Cascade, map: "Whatsapp_User_Case_ibfk_4")

  @@unique([case_id, WhatsappUserUserId], map: "Whatsapp_User_Case_case_id_WhatsappUserUserId_unique")
  @@unique([user_id, CaseCaseId], map: "Whatsapp_User_Case_user_id_CaseCaseId_unique")
  @@index([CaseCaseId], map: "CaseCaseId")
  @@index([WhatsappUserUserId], map: "WhatsappUserUserId")
}

model Whatsapp_Wapi {
  whatsapp_wapi_id Int       @id @default(autoincrement())
  account_id       Int?
  subscribed       Boolean?
  phone_number     String?   @db.VarChar(255)
  auth_token       String?   @db.Text
  user             String?   @db.VarChar(255)
  password         String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  api_url          String?   @db.VarChar(255)
  name             String?   @default("0") @db.VarChar(255)
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Wapi_ibfk_1")

  @@index([account_id], map: "account_id")
}

model Whatsapp_Wavy {
  whatsapp_wavy_id Int       @id @default(autoincrement())
  account_id       Int?
  subscribed       Boolean?
  name             String?   @db.VarChar(255)
  phone_number     String?   @db.VarChar(255)
  auth_token       String?   @db.VarChar(255)
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  deletedAt        DateTime? @db.DateTime(0)
  Account          Account?  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "Whatsapp_Wavy_ibfk_1")

  @@index([account_id], map: "account_id")
}
